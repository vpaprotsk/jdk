/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file is generated by FieldGen.java. Do not modify it directly.
 */

package sun.security.util.math.intpoly;

import sun.security.util.math.ImmutableIntegerModuloP;
import sun.security.util.math.IntegerMontgomeryFieldModuloP;
import sun.security.util.math.IntegerResidueMontgomeryFieldModuloP;
import sun.security.util.math.SmallValue;
import java.lang.Math;

import java.math.BigInteger;
public final class MontgomeryIntegerPolynomialP256 extends IntegerPolynomial implements IntegerMontgomeryFieldModuloP, IntegerResidueMontgomeryFieldModuloP { 
    private static final int BITS_PER_LIMB = 26;
    private static final int NUM_LIMBS = 10;
    private static final int MAX_ADDS = 1;
    public static final BigInteger MODULUS = evaluateModulus();
    //private static final long CARRY_ADD = 1 << 25;
    private static final int LIMB_MASK = -1 >>> (64 - BITS_PER_LIMB);

    public static final MontgomeryIntegerPolynomialP256 ONE = new MontgomeryIntegerPolynomialP256();

    private MontgomeryIntegerPolynomialP256() {
        super(BITS_PER_LIMB, NUM_LIMBS, MAX_ADDS, MODULUS);
    }

    //(224%nat,-1)::(192%nat,1)::(96%nat,1)::(0%nat,-1)::nil.
    private static BigInteger evaluateModulus() {
        BigInteger result = BigInteger.valueOf(2).pow(256);
        result = result.subtract(BigInteger.valueOf(1).shiftLeft(224));
        result = result.add(BigInteger.valueOf(1).shiftLeft(192));
        result = result.add(BigInteger.valueOf(1).shiftLeft(96));
        result = result.subtract(BigInteger.valueOf(1));
        return result;
    }
    // @Override
    // protected void mult(long[] a, long[] b, long[] r) {
    //     long c0 =  (a[0] * b[0]);
    //     long c1 =  (a[0] * b[1]) + (a[1] * b[0])                                                                                                                                 + (c0 * modulus[1]);
    //     long c2 =  (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0])                                                                                                                 + (c0 * modulus[2]) + (c1 * modulus[1]);
    //     long c3 =  (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0])                                                                                                 + (c0 * modulus[3]) + (c1 * modulus[2]) + (c2 * modulus[1]);
    //     long c4 =  (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0])                                                                                 + (c0 * modulus[4]) + (c1 * modulus[3]) + (c2 * modulus[2]) + (c3 * modulus[1]);
    //     long c5 =  (a[0] * b[5]) + (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]) + (a[5] * b[0])                                                                 + (c0 * modulus[5]) + (c1 * modulus[4]) + (c2 * modulus[3]) + (c3 * modulus[2]) + (c4 * modulus[1]);
    //     long c6 =  (a[0] * b[6]) + (a[1] * b[5]) + (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]) + (a[5] * b[1]) + (a[6] * b[0])                                                 + (c0 * modulus[6]) + (c1 * modulus[5]) + (c2 * modulus[4]) + (c3 * modulus[3]) + (c4 * modulus[2]) + (c5 * modulus[1]);
    //     long c7 =  (a[0] * b[7]) + (a[1] * b[6]) + (a[2] * b[5]) + (a[3] * b[4]) + (a[4] * b[3]) + (a[5] * b[2]) + (a[6] * b[1]) + (a[7] * b[0])                                 + (c0 * modulus[7]) + (c1 * modulus[6]) + (c2 * modulus[5]) + (c3 * modulus[4]) + (c4 * modulus[3]) + (c5 * modulus[2]) + (c6 * modulus[1]);
    //     long c8 =  (a[0] * b[8]) + (a[1] * b[7]) + (a[2] * b[6]) + (a[3] * b[5]) + (a[4] * b[4]) + (a[5] * b[3]) + (a[6] * b[2]) + (a[7] * b[1]) + (a[8] * b[0])                 + (c0 * modulus[8]) + (c1 * modulus[7]) + (c2 * modulus[6]) + (c3 * modulus[5]) + (c4 * modulus[4]) + (c5 * modulus[3]) + (c6 * modulus[2]) + (c7 * modulus[1]);
    //     long c9 =  (a[0] * b[9]) + (a[1] * b[8]) + (a[2] * b[7]) + (a[3] * b[6]) + (a[4] * b[5]) + (a[5] * b[4]) + (a[6] * b[3]) + (a[7] * b[2]) + (a[8] * b[1]) + (a[9] * b[0]) + (c0 * modulus[9]) + (c1 * modulus[8]) + (c2 * modulus[7]) + (c3 * modulus[6]) + (c4 * modulus[5]) + (c5 * modulus[4]) + (c6 * modulus[3]) + (c7 * modulus[2]) + (c8 * modulus[1]);
    //     long c10 = (a[1] * b[9]) + (a[2] * b[8]) + (a[3] * b[7]) + (a[4] * b[6]) + (a[5] * b[5]) + (a[6] * b[4]) + (a[7] * b[3]) + (a[8] * b[2]) + (a[9] * b[1])                                     + (c1 * modulus[9]) + (c2 * modulus[8]) + (c3 * modulus[7]) + (c4 * modulus[6]) + (c5 * modulus[5]) + (c6 * modulus[4]) + (c7 * modulus[3]) + (c8 * modulus[2]) + (c9 * modulus[1]);
    //     long c11 = (a[2] * b[9]) + (a[3] * b[8]) + (a[4] * b[7]) + (a[5] * b[6]) + (a[6] * b[5]) + (a[7] * b[4]) + (a[8] * b[3]) + (a[9] * b[2])                                                                         + (c2 * modulus[9]) + (c3 * modulus[8]) + (c4 * modulus[7]) + (c5 * modulus[6]) + (c6 * modulus[5]) + (c7 * modulus[4]) + (c8 * modulus[3]) + (c9 * modulus[2]);
    //     long c12 = (a[3] * b[9]) + (a[4] * b[8]) + (a[5] * b[7]) + (a[6] * b[6]) + (a[7] * b[5]) + (a[8] * b[4]) + (a[9] * b[3])                                                                                                             + (c3 * modulus[9]) + (c4 * modulus[8]) + (c5 * modulus[7]) + (c6 * modulus[6]) + (c7 * modulus[5]) + (c8 * modulus[4]) + (c9 * modulus[3]);
    //     long c13 = (a[4] * b[9]) + (a[5] * b[8]) + (a[6] * b[7]) + (a[7] * b[6]) + (a[8] * b[5]) + (a[9] * b[4])                                                                                                                                                 + (c4 * modulus[9]) + (c5 * modulus[8]) + (c6 * modulus[7]) + (c7 * modulus[6]) + (c8 * modulus[5]) + (c9 * modulus[4]);
    //     long c14 = (a[5] * b[9]) + (a[6] * b[8]) + (a[7] * b[7]) + (a[8] * b[6]) + (a[9] * b[5])                                                                                                                                                                                     + (c5 * modulus[9]) + (c6 * modulus[8]) + (c7 * modulus[7]) + (c8 * modulus[6]) + (c9 * modulus[5]);
    //     long c15 = (a[6] * b[9]) + (a[7] * b[8]) + (a[8] * b[7]) + (a[9] * b[6])                                                                                                                                                                                                                         + (c6 * modulus[9]) + (c7 * modulus[8]) + (c8 * modulus[7]) + (c9 * modulus[6]);
    //     long c16 = (a[7] * b[9]) + (a[8] * b[8]) + (a[9] * b[7])                                                                                                                                                                                                                                                             + (c7 * modulus[9]) + (c8 * modulus[8]) + (c9 * modulus[7]);
    //     long c17 = (a[8] * b[9]) + (a[9] * b[8])                                                                                                                                                                                                                                                                                                 + (c8 * modulus[9]) + (c9 * modulus[8]);
    //     long c18 = (a[9] * b[9])                                                                                                                                                                                                                                                                                                                                     + (c9 * modulus[9]);

    //     carryReduce(r, c10, c11, c12, c13, c14, c15, c16, c17, c18, 0);
    // }

    private void debugRow(String prefix, long c0, long c1, long c2, long c3, long c4, long c5, long c6, long c7, long c8, long c9 ) {
        if (true) {
            return;
        }
        final java.util.HexFormat hex = java.util.HexFormat.of();
        System.out.println(prefix + 
        "0x" + hex.toHexDigits(c9) + " * 2^234 + " + 
        "0x" + hex.toHexDigits(c8) + " * 2^208 + " + 
        "0x" + hex.toHexDigits(c7) + " * 2^182 + " + 
        "0x" + hex.toHexDigits(c6) + " * 2^156 + " + 
        "0x" + hex.toHexDigits(c5) + " * 2^130 + " + 
        "0x" + hex.toHexDigits(c4) + " * 2^104 + " + 
        "0x" + hex.toHexDigits(c3) + " * 2^78 + " + 
        "0x" + hex.toHexDigits(c2) + " * 2^52 + " + 
        "0x" + hex.toHexDigits(c1) + " * 2^26 + " + 
        "0x" + hex.toHexDigits(c0));
    }

    private void debugRow(String prefix, long c0, long c1, long c2, long c3, long c4) {
        if (false) {
            return;
        }
        final java.util.HexFormat hex = java.util.HexFormat.of();
        System.out.println(prefix + 
        "0x" + hex.toHexDigits(c4) + " * 2^208 + " + 
        "0x" + hex.toHexDigits(c3) + " * 2^156 + " + 
        "0x" + hex.toHexDigits(c2) + " * 2^104 + " + 
        "0x" + hex.toHexDigits(c1) + " * 2^52 + " + 
        "0x" + hex.toHexDigits(c0));
    }

    private void debugRow(String prefix, long c0, long c1, long c2, long c3, long c4, long c5) {
        if (false) {
            return;
        }
        final java.util.HexFormat hex = java.util.HexFormat.of();
        System.out.println(prefix + 
        "0x" + hex.toHexDigits(c5) + " * 2^260 + " + 
        "0x" + hex.toHexDigits(c4) + " * 2^208 + " + 
        "0x" + hex.toHexDigits(c3) + " * 2^156 + " + 
        "0x" + hex.toHexDigits(c2) + " * 2^104 + " + 
        "0x" + hex.toHexDigits(c1) + " * 2^52 + " + 
        "0x" + hex.toHexDigits(c0));
    }

    @Override
    protected void mult(long[] a, long[] b, long[] r) {
        // long c0 =  (a[0] * b[0]);
        // long c1 =  (a[0] * b[1]) + (a[1] * b[0])                                                                                                                                 + ((c0 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[1]);
        // long c2 =  (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0])                                                                                                                 + ((c1 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[2]) + (c1 * modulus[1]);
        // long c3 =  (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0])                                                                                                 + ((c2 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[3]) + (c1 * modulus[2]) + (c2 * modulus[1]);
        // long c4 =  (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0])                                                                                 + ((c3 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[4]) + (c1 * modulus[3]) + (c2 * modulus[2]) + (c3 * modulus[1]);
        // long c5 =  (a[0] * b[5]) + (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]) + (a[5] * b[0])                                                                 + ((c4 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[5]) + (c1 * modulus[4]) + (c2 * modulus[3]) + (c3 * modulus[2]) + (c4 * modulus[1]);
        // long c6 =  (a[0] * b[6]) + (a[1] * b[5]) + (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]) + (a[5] * b[1]) + (a[6] * b[0])                                                 + ((c5 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[6]) + (c1 * modulus[5]) + (c2 * modulus[4]) + (c3 * modulus[3]) + (c4 * modulus[2]) + (c5 * modulus[1]);
        // long c7 =  (a[0] * b[7]) + (a[1] * b[6]) + (a[2] * b[5]) + (a[3] * b[4]) + (a[4] * b[3]) + (a[5] * b[2]) + (a[6] * b[1]) + (a[7] * b[0])                                 + ((c6 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[7]) + (c1 * modulus[6]) + (c2 * modulus[5]) + (c3 * modulus[4]) + (c4 * modulus[3]) + (c5 * modulus[2]) + (c6 * modulus[1]);
        // long c8 =  (a[0] * b[8]) + (a[1] * b[7]) + (a[2] * b[6]) + (a[3] * b[5]) + (a[4] * b[4]) + (a[5] * b[3]) + (a[6] * b[2]) + (a[7] * b[1]) + (a[8] * b[0])                 + ((c7 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[8]) + (c1 * modulus[7]) + (c2 * modulus[6]) + (c3 * modulus[5]) + (c4 * modulus[4]) + (c5 * modulus[3]) + (c6 * modulus[2]) + (c7 * modulus[1]);
        // long c9 =  (a[0] * b[9]) + (a[1] * b[8]) + (a[2] * b[7]) + (a[3] * b[6]) + (a[4] * b[5]) + (a[5] * b[4]) + (a[6] * b[3]) + (a[7] * b[2]) + (a[8] * b[1]) + (a[9] * b[0]) + ((c8 * modulus[0]) >> BITS_PER_LIMB) + (c0 * modulus[9]) + (c1 * modulus[8]) + (c2 * modulus[7]) + (c3 * modulus[6]) + (c4 * modulus[5]) + (c5 * modulus[4]) + (c6 * modulus[3]) + (c7 * modulus[2]) + (c8 * modulus[1]);
        // long c10 =                 (a[1] * b[9]) + (a[2] * b[8]) + (a[3] * b[7]) + (a[4] * b[6]) + (a[5] * b[5]) + (a[6] * b[4]) + (a[7] * b[3]) + (a[8] * b[2]) + (a[9] * b[1]) + ((c9 * modulus[0]) >> BITS_PER_LIMB)                     + (c1 * modulus[9]) + (c2 * modulus[8]) + (c3 * modulus[7]) + (c4 * modulus[6]) + (c5 * modulus[5]) + (c6 * modulus[4]) + (c7 * modulus[3]) + (c8 * modulus[2]) + (c9 * modulus[1]);
        // long c11 =                                 (a[2] * b[9]) + (a[3] * b[8]) + (a[4] * b[7]) + (a[5] * b[6]) + (a[6] * b[5]) + (a[7] * b[4]) + (a[8] * b[3]) + (a[9] * b[2])                                                                                + (c2 * modulus[9]) + (c3 * modulus[8]) + (c4 * modulus[7]) + (c5 * modulus[6]) + (c6 * modulus[5]) + (c7 * modulus[4]) + (c8 * modulus[3]) + (c9 * modulus[2]);
        // long c12 =                                                 (a[3] * b[9]) + (a[4] * b[8]) + (a[5] * b[7]) + (a[6] * b[6]) + (a[7] * b[5]) + (a[8] * b[4]) + (a[9] * b[3])                                                                                                    + (c3 * modulus[9]) + (c4 * modulus[8]) + (c5 * modulus[7]) + (c6 * modulus[6]) + (c7 * modulus[5]) + (c8 * modulus[4]) + (c9 * modulus[3]);
        // long c13 =                                                                 (a[4] * b[9]) + (a[5] * b[8]) + (a[6] * b[7]) + (a[7] * b[6]) + (a[8] * b[5]) + (a[9] * b[4])                                                                                                                        + (c4 * modulus[9]) + (c5 * modulus[8]) + (c6 * modulus[7]) + (c7 * modulus[6]) + (c8 * modulus[5]) + (c9 * modulus[4]);
        // long c14 =                                                                                 (a[5] * b[9]) + (a[6] * b[8]) + (a[7] * b[7]) + (a[8] * b[6]) + (a[9] * b[5])                                                                                                                                            + (c5 * modulus[9]) + (c6 * modulus[8]) + (c7 * modulus[7]) + (c8 * modulus[6]) + (c9 * modulus[5]);
        // long c15 =                                                                                                 (a[6] * b[9]) + (a[7] * b[8]) + (a[8] * b[7]) + (a[9] * b[6])                                                                                                                                                                + (c6 * modulus[9]) + (c7 * modulus[8]) + (c8 * modulus[7]) + (c9 * modulus[6]);
        // long c16 =                                                                                                                 (a[7] * b[9]) + (a[8] * b[8]) + (a[9] * b[7])                                                                                                                                                                                    + (c7 * modulus[9]) + (c8 * modulus[8]) + (c9 * modulus[7]);
        // long c17 =                                                                                                                                 (a[8] * b[9]) + (a[9] * b[8])                                                                                                                                                                                                        + (c8 * modulus[9]) + (c9 * modulus[8]);
        // long c18 =         
        //                                                                                                                                        (a[9] * b[9])                                                                                                                                                                                                                            + (c9 * modulus[9]);
        
        // debugRow("a =\n", a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);
        // debugRow("b =\n", b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9]);

        // long c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19;
        // c10 = c11 = c12 = c13 = c14 = c15 = c16 = c17 = c18 = c19 = 0;
        // long n0, n1, n2, n3, n4, n5, n6, n7, n8, n9;

        // c0  = (a[0] * b[0]);
        // n0 = c0&LIMB_MASK;c0 += n0 * modulus[0];
        // c1  =   (a[0] * b[1]) + n0 * modulus[1];
        // c2  =   (a[0] * b[2]) + n0 * modulus[2];
        // c3  =   (a[0] * b[3]) + n0 * modulus[3];
        // c4  =   (a[0] * b[4]) + n0 * modulus[4];
        // c5  =   (a[0] * b[5]) + n0 * modulus[5];
        // c6  =   (a[0] * b[6]) + n0 * modulus[6];
        // c7  =   (a[0] * b[7]) + n0 * modulus[7];
        // c8  =   (a[0] * b[8]) + n0 * modulus[8];
        // c9  =   (a[0] * b[9]) + n0 * modulus[9];
        // // debugRow("row 1\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);

        // c1  += (a[1] * b[0]) + (c0 >> BITS_PER_LIMB);
        // n1 = c1&LIMB_MASK;c1 += n1 * modulus[0];
        // c2  +=  (a[1] * b[1]) + n1 * modulus[1];
        // c3  +=  (a[1] * b[2]) + n1 * modulus[2];
        // c4  +=  (a[1] * b[3]) + n1 * modulus[3];
        // c5  +=  (a[1] * b[4]) + n1 * modulus[4];
        // c6  +=  (a[1] * b[5]) + n1 * modulus[5];
        // c7  +=  (a[1] * b[6]) + n1 * modulus[6];
        // c8  +=  (a[1] * b[7]) + n1 * modulus[7];
        // c9  +=  (a[1] * b[8]) + n1 * modulus[8];
        // c10 +=  (a[1] * b[9]) + n1 * modulus[9];
        // // debugRow("row 2\n", c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

        // c2  += (a[2] * b[0]) + (c1 >> BITS_PER_LIMB);
        // n2 = c2&LIMB_MASK;c2 += n2 * modulus[0];
        // c3  +=  (a[2] * b[1]) + n2 * modulus[1];
        // c4  +=  (a[2] * b[2]) + n2 * modulus[2];
        // c5  +=  (a[2] * b[3]) + n2 * modulus[3];
        // c6  +=  (a[2] * b[4]) + n2 * modulus[4];
        // c7  +=  (a[2] * b[5]) + n2 * modulus[5];
        // c8  +=  (a[2] * b[6]) + n2 * modulus[6];
        // c9  +=  (a[2] * b[7]) + n2 * modulus[7];
        // c10 +=  (a[2] * b[8]) + n2 * modulus[8];
        // c11 +=  (a[2] * b[9]) + n2 * modulus[9];
        // // debugRow("row 3\n", c2, c3, c4, c5, c6, c7, c8, c9, c10, c11);

        // c3  += (a[3] * b[0]) + (c2 >> BITS_PER_LIMB);
        // n3 = c3&LIMB_MASK;c3 += n3 * modulus[0];
        // c4  +=  (a[3] * b[1]) + n3 * modulus[1];
        // c5  +=  (a[3] * b[2]) + n3 * modulus[2];
        // c6  +=  (a[3] * b[3]) + n3 * modulus[3];
        // c7  +=  (a[3] * b[4]) + n3 * modulus[4];
        // c8  +=  (a[3] * b[5]) + n3 * modulus[5];
        // c9  +=  (a[3] * b[6]) + n3 * modulus[6];
        // c10 +=  (a[3] * b[7]) + n3 * modulus[7];
        // c11 +=  (a[3] * b[8]) + n3 * modulus[8];
        // c12 +=  (a[3] * b[9]) + n3 * modulus[9];
        // // debugRow("row 4\n", c3, c4, c5, c6, c7, c8, c9, c10, c11, c12);

        // c4  += (a[4] * b[0]) + (c3 >> BITS_PER_LIMB);
        // n4 = c4&LIMB_MASK;c4 += n4 * modulus[0];
        // c5  +=  (a[4] * b[1]) + n4 * modulus[1];
        // c6  +=  (a[4] * b[2]) + n4 * modulus[2];
        // c7  +=  (a[4] * b[3]) + n4 * modulus[3];
        // c8  +=  (a[4] * b[4]) + n4 * modulus[4];
        // c9  +=  (a[4] * b[5]) + n4 * modulus[5];
        // c10 +=  (a[4] * b[6]) + n4 * modulus[6];
        // c11 +=  (a[4] * b[7]) + n4 * modulus[7];
        // c12 +=  (a[4] * b[8]) + n4 * modulus[8];
        // c13 +=  (a[4] * b[9]) + n4 * modulus[9];
        // // debugRow("row 5\n", c4, c5, c6, c7, c8, c9, c10, c11, c12, c13);

        // c5  += (a[5] * b[0]) + (c4 >> BITS_PER_LIMB);
        // n5 = c5&LIMB_MASK;c5 += n5 * modulus[0];
        // c6  +=  (a[5] * b[1]) + n5 * modulus[1];
        // c7  +=  (a[5] * b[2]) + n5 * modulus[2];
        // c8  +=  (a[5] * b[3]) + n5 * modulus[3];
        // c9  +=  (a[5] * b[4]) + n5 * modulus[4];
        // c10 +=  (a[5] * b[5]) + n5 * modulus[5];
        // c11 +=  (a[5] * b[6]) + n5 * modulus[6];
        // c12 +=  (a[5] * b[7]) + n5 * modulus[7];
        // c13 +=  (a[5] * b[8]) + n5 * modulus[8];
        // c14 +=  (a[5] * b[9]) + n5 * modulus[9];
        // // debugRow("row 6\n", c5, c6, c7, c8, c9, c10, c11, c12, c13, c14);

        // c6  += (a[6] * b[0]) + (c5 >> BITS_PER_LIMB);
        // n6 = c6&LIMB_MASK;c6 += n6 * modulus[0];
        // c7  +=  (a[6] * b[1]) + n6 * modulus[1];
        // c8  +=  (a[6] * b[2]) + n6 * modulus[2];
        // c9  +=  (a[6] * b[3]) + n6 * modulus[3];
        // c10 +=  (a[6] * b[4]) + n6 * modulus[4];
        // c11 +=  (a[6] * b[5]) + n6 * modulus[5];
        // c12 +=  (a[6] * b[6]) + n6 * modulus[6];
        // c13 +=  (a[6] * b[7]) + n6 * modulus[7];
        // c14 +=  (a[6] * b[8]) + n6 * modulus[8];
        // c15 +=  (a[6] * b[9]) + n6 * modulus[9];
        // // debugRow("row 7\n", c6, c7, c8, c9, c10, c11, c12, c13, c14, c15);

        // c7  += (a[7] * b[0]) + (c6 >> BITS_PER_LIMB);
        // n7 = c7&LIMB_MASK;c7 += n7 * modulus[0];
        // c8  +=  (a[7] * b[1]) + n7 * modulus[1];
        // c9  +=  (a[7] * b[2]) + n7 * modulus[2];
        // c10 +=  (a[7] * b[3]) + n7 * modulus[3];
        // c11 +=  (a[7] * b[4]) + n7 * modulus[4];
        // c12 +=  (a[7] * b[5]) + n7 * modulus[5];
        // c13 +=  (a[7] * b[6]) + n7 * modulus[6];
        // c14 +=  (a[7] * b[7]) + n7 * modulus[7];
        // c15 +=  (a[7] * b[8]) + n7 * modulus[8];
        // c16 +=  (a[7] * b[9]) + n7 * modulus[9];
        // // debugRow("row 8\n", c7, c8, c9, c10, c11, c12, c13, c14, c15, c16);

        // c8  += (a[8] * b[0]) + (c7 >> BITS_PER_LIMB);
        // n8 = c8&LIMB_MASK;c8 += n8 * modulus[0];
        // c9  +=  (a[8] * b[1]) + n8 * modulus[1];
        // c10 +=  (a[8] * b[2]) + n8 * modulus[2];
        // c11 +=  (a[8] * b[3]) + n8 * modulus[3];
        // c12 +=  (a[8] * b[4]) + n8 * modulus[4];
        // c13 +=  (a[8] * b[5]) + n8 * modulus[5];
        // c14 +=  (a[8] * b[6]) + n8 * modulus[6];
        // c15 +=  (a[8] * b[7]) + n8 * modulus[7];
        // c16 +=  (a[8] * b[8]) + n8 * modulus[8];
        // c17 +=  (a[8] * b[9]) + n8 * modulus[9];
        // // debugRow("row 9\n", c8, c9, c10, c11, c12, c13, c14, c15, c16, c17);

        // c9  += (a[9] * b[0]) + (c8 >> BITS_PER_LIMB);
        // n9 = c9&LIMB_MASK;c9 += n9 * modulus[0];
        // c10 +=  (a[9] * b[1]) + n9 * modulus[1];
        // c11 +=  (a[9] * b[2]) + n9 * modulus[2];
        // c12 +=  (a[9] * b[3]) + n9 * modulus[3];
        // c13 +=  (a[9] * b[4]) + n9 * modulus[4];
        // c14 +=  (a[9] * b[5]) + n9 * modulus[5];
        // c15 +=  (a[9] * b[6]) + n9 * modulus[6];
        // c16 +=  (a[9] * b[7]) + n9 * modulus[7];
        // c17 +=  (a[9] * b[8]) + n9 * modulus[8];
        // c18 +=  (a[9] * b[9]) + n9 * modulus[9];
        // // debugRow("row 10\n", c9, c10, c11, c12, c13, c14, c15, c16, c17, c18);

        // c10 += c9  >> BITS_PER_LIMB;
        // c11 += c10 >> BITS_PER_LIMB; c10 &= LIMB_MASK;
        // c12 += c11 >> BITS_PER_LIMB; c11 &= LIMB_MASK;
        // c13 += c12 >> BITS_PER_LIMB; c12 &= LIMB_MASK;
        // c14 += c13 >> BITS_PER_LIMB; c13 &= LIMB_MASK;
        // c15 += c14 >> BITS_PER_LIMB; c14 &= LIMB_MASK;
        // c16 += c15 >> BITS_PER_LIMB; c15 &= LIMB_MASK;
        // c17 += c16 >> BITS_PER_LIMB; c16 &= LIMB_MASK;
        // c18 += c17 >> BITS_PER_LIMB; c17 &= LIMB_MASK;
        // c19 += c18 >> BITS_PER_LIMB; c18 &= LIMB_MASK;
        // // debugRow("final sum\n", c10, c11, c12, c13, c14, c15, c16, c17, c18, c19);

        // c0 = c10 - modulus[0];
        // c1 = c11 - modulus[1] - (c0 >> BITS_PER_LIMB); c0 &= LIMB_MASK;
        // c2 = c12 - modulus[2] - (c1 >> BITS_PER_LIMB); c1 &= LIMB_MASK;
        // c3 = c13 - modulus[3] - (c2 >> BITS_PER_LIMB); c2 &= LIMB_MASK;
        // c4 = c14 - modulus[4] - (c3 >> BITS_PER_LIMB); c3 &= LIMB_MASK;
        // c5 = c15 - modulus[5] - (c4 >> BITS_PER_LIMB); c4 &= LIMB_MASK;
        // c6 = c16 - modulus[6] - (c5 >> BITS_PER_LIMB); c5 &= LIMB_MASK;
        // c7 = c17 - modulus[7] - (c6 >> BITS_PER_LIMB); c6 &= LIMB_MASK;
        // c8 = c18 - modulus[8] - (c7 >> BITS_PER_LIMB); c7 &= LIMB_MASK;
        // c9 = c19 - modulus[9] - (c8 >> BITS_PER_LIMB); c8 &= LIMB_MASK;
        // long mask = c9 >> BITS_PER_LIMB; // Signed shift!
        //                                                //c9 &= LIMB_MASK;
        // // debugRow("reduced\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);
        // assert(mask==0 || mask==-1);

        // r[0] = (c10 & mask) | (c0 & ~mask);
        // r[1] = (c11 & mask) | (c1 & ~mask);
        // r[2] = (c12 & mask) | (c2 & ~mask);
        // r[3] = (c13 & mask) | (c3 & ~mask);
        // r[4] = (c14 & mask) | (c4 & ~mask);
        // r[5] = (c15 & mask) | (c5 & ~mask);
        // r[6] = (c16 & mask) | (c6 & ~mask);
        // r[7] = (c17 & mask) | (c7 & ~mask);
        // r[8] = (c18 & mask) | (c8 & ~mask);
        // r[9] = (c19 & mask) | (c9 & ~mask);

        // debugRow("r =\n", r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9]);
        
        //carryReduce(r, c10, c11, c12, c13, c14, c15, c16, c17, c18, 0);
        //throw new RuntimeException("VP was here 3");



        // long c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19;
        // c10 = c11 = c12 = c13 = c14 = c15 = c16 = c17 = c18 = c19 = 0;
        // long n0, n1, n2, n3, n4, n5, n6, n7, n8, n9;

        // long c0 =  (a[0] * b[0]);                                                                                                                                          long n0 = c0 & LIMB_MASK; c0 += (n0 * modulus[0]);
        // long c1 =  (a[0] * b[1]) + (a[1] * b[0])                                                                                                                                 + (c0 >> BITS_PER_LIMB) + (n0 * modulus[1]); long n1 = c1 & LIMB_MASK; c1 += (n1 * modulus[0]);
        // long c2 =  (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0])                                                                                                                 + (c1 >> BITS_PER_LIMB) + (n0 * modulus[2]) + (n1 * modulus[1]); long n2 = c2 & LIMB_MASK; c2 += (n2 * modulus[0]);
        // long c3 =  (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0])                                                                                                 + (c2 >> BITS_PER_LIMB) + (n0 * modulus[3]) + (n1 * modulus[2]) + (n2 * modulus[1]);  long n3 = c3 & LIMB_MASK; c3 += (n3 * modulus[0]);
        // long c4 =  (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0])                                                                                 + (c3 >> BITS_PER_LIMB) + (n0 * modulus[4]) + (n1 * modulus[3]) + (n2 * modulus[2]) + (n3 * modulus[1]);  long n4 = c4 & LIMB_MASK; c4 += (n4 * modulus[0]);
        // long c5 =  (a[0] * b[5]) + (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]) + (a[5] * b[0])                                                                 + (c4 >> BITS_PER_LIMB) + (n0 * modulus[5]) + (n1 * modulus[4]) + (n2 * modulus[3]) + (n3 * modulus[2]) + (n4 * modulus[1]);  long n5 = c5 & LIMB_MASK; c5 += (n5 * modulus[0]);
        // long c6 =  (a[0] * b[6]) + (a[1] * b[5]) + (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]) + (a[5] * b[1]) + (a[6] * b[0])                                                 + (c5 >> BITS_PER_LIMB) + (n0 * modulus[6]) + (n1 * modulus[5]) + (n2 * modulus[4]) + (n3 * modulus[3]) + (n4 * modulus[2]) + (n5 * modulus[1]);  long n6 = c6 & LIMB_MASK; c6 += (n6 * modulus[0]);
        // long c7 =  (a[0] * b[7]) + (a[1] * b[6]) + (a[2] * b[5]) + (a[3] * b[4]) + (a[4] * b[3]) + (a[5] * b[2]) + (a[6] * b[1]) + (a[7] * b[0])                                 + (c6 >> BITS_PER_LIMB) + (n0 * modulus[7]) + (n1 * modulus[6]) + (n2 * modulus[5]) + (n3 * modulus[4]) + (n4 * modulus[3]) + (n5 * modulus[2]) + (n6 * modulus[1]);  long n7 = c7 & LIMB_MASK; c7 += (n7 * modulus[0]);
        // long c8 =  (a[0] * b[8]) + (a[1] * b[7]) + (a[2] * b[6]) + (a[3] * b[5]) + (a[4] * b[4]) + (a[5] * b[3]) + (a[6] * b[2]) + (a[7] * b[1]) + (a[8] * b[0])                 + (c7 >> BITS_PER_LIMB) + (n0 * modulus[8]) + (n1 * modulus[7]) + (n2 * modulus[6]) + (n3 * modulus[5]) + (n4 * modulus[4]) + (n5 * modulus[3]) + (n6 * modulus[2]) + (n7 * modulus[1]);  long n8 = c8 & LIMB_MASK; c8 += (n8 * modulus[0]);
        // long c9 =  (a[0] * b[9]) + (a[1] * b[8]) + (a[2] * b[7]) + (a[3] * b[6]) + (a[4] * b[5]) + (a[5] * b[4]) + (a[6] * b[3]) + (a[7] * b[2]) + (a[8] * b[1]) + (a[9] * b[0]) + (c8 >> BITS_PER_LIMB) + (n0 * modulus[9]) + (n1 * modulus[8]) + (n2 * modulus[7]) + (n3 * modulus[6]) + (n4 * modulus[5]) + (n5 * modulus[4]) + (n6 * modulus[3]) + (n7 * modulus[2]) + (n8 * modulus[1]);  long n9 = c9 & LIMB_MASK; c9 += (n9 * modulus[0]);
        // long c10 =                 (a[1] * b[9]) + (a[2] * b[8]) + (a[3] * b[7]) + (a[4] * b[6]) + (a[5] * b[5]) + (a[6] * b[4]) + (a[7] * b[3]) + (a[8] * b[2]) + (a[9] * b[1]) + (c9 >> BITS_PER_LIMB)                     + (n1 * modulus[9]) + (n2 * modulus[8]) + (n3 * modulus[7]) + (n4 * modulus[6]) + (n5 * modulus[5]) + (n6 * modulus[4]) + (n7 * modulus[3]) + (n8 * modulus[2]) + (n9 * modulus[1]);
        // long c11 =                                 (a[2] * b[9]) + (a[3] * b[8]) + (a[4] * b[7]) + (a[5] * b[6]) + (a[6] * b[5]) + (a[7] * b[4]) + (a[8] * b[3]) + (a[9] * b[2])                                                                 + (n2 * modulus[9]) + (n3 * modulus[8]) + (n4 * modulus[7]) + (n5 * modulus[6]) + (n6 * modulus[5]) + (n7 * modulus[4]) + (n8 * modulus[3]) + (n9 * modulus[2]);
        // long c12 =                                                 (a[3] * b[9]) + (a[4] * b[8]) + (a[5] * b[7]) + (a[6] * b[6]) + (a[7] * b[5]) + (a[8] * b[4]) + (a[9] * b[3])                                                                                     + (n3 * modulus[9]) + (n4 * modulus[8]) + (n5 * modulus[7]) + (n6 * modulus[6]) + (n7 * modulus[5]) + (n8 * modulus[4]) + (n9 * modulus[3]);
        // long c13 =                                                                 (a[4] * b[9]) + (a[5] * b[8]) + (a[6] * b[7]) + (a[7] * b[6]) + (a[8] * b[5]) + (a[9] * b[4])                                                                                                         + (n4 * modulus[9]) + (n5 * modulus[8]) + (n6 * modulus[7]) + (n7 * modulus[6]) + (n8 * modulus[5]) + (n9 * modulus[4]);
        // long c14 =                                                                                 (a[5] * b[9]) + (a[6] * b[8]) + (a[7] * b[7]) + (a[8] * b[6]) + (a[9] * b[5])                                                                                                                             + (n5 * modulus[9]) + (n6 * modulus[8]) + (n7 * modulus[7]) + (n8 * modulus[6]) + (n9 * modulus[5]);
        // long c15 =                                                                                                 (a[6] * b[9]) + (a[7] * b[8]) + (a[8] * b[7]) + (a[9] * b[6])                                                                                                                                                 + (n6 * modulus[9]) + (n7 * modulus[8]) + (n8 * modulus[7]) + (n9 * modulus[6]);
        // long c16 =                                                                                                                 (a[7] * b[9]) + (a[8] * b[8]) + (a[9] * b[7])                                                                                                                                                                     + (n7 * modulus[9]) + (n8 * modulus[8]) + (n9 * modulus[7]);
        // long c17 =                                                                                                                                 (a[8] * b[9]) + (a[9] * b[8])                                                                                                                                                                                         + (n8 * modulus[9]) + (n9 * modulus[8]);
        // long c18 =                                                                                                                                                 (a[9] * b[9])                                                                                                                                                                                                             + (n9 * modulus[9]);
        // long c19 = 0;      

        // c10 += c9  >> BITS_PER_LIMB;
        // c11 += c10 >> BITS_PER_LIMB; c10 &= LIMB_MASK;
        // c12 += c11 >> BITS_PER_LIMB; c11 &= LIMB_MASK;
        // c13 += c12 >> BITS_PER_LIMB; c12 &= LIMB_MASK;
        // c14 += c13 >> BITS_PER_LIMB; c13 &= LIMB_MASK;
        // c15 += c14 >> BITS_PER_LIMB; c14 &= LIMB_MASK;
        // c16 += c15 >> BITS_PER_LIMB; c15 &= LIMB_MASK;
        // c17 += c16 >> BITS_PER_LIMB; c16 &= LIMB_MASK;
        // c18 += c17 >> BITS_PER_LIMB; c17 &= LIMB_MASK;
        // c19 += c18 >> BITS_PER_LIMB; c18 &= LIMB_MASK;
        // // debugRow("final sum\n", c10, c11, c12, c13, c14, c15, c16, c17, c18, c19);

        // c0 = c10 - modulus[0];
        // c1 = c11 - modulus[1] - (c0 >> BITS_PER_LIMB); c0 &= LIMB_MASK;
        // c2 = c12 - modulus[2] - (c1 >> BITS_PER_LIMB); c1 &= LIMB_MASK;
        // c3 = c13 - modulus[3] - (c2 >> BITS_PER_LIMB); c2 &= LIMB_MASK;
        // c4 = c14 - modulus[4] - (c3 >> BITS_PER_LIMB); c3 &= LIMB_MASK;
        // c5 = c15 - modulus[5] - (c4 >> BITS_PER_LIMB); c4 &= LIMB_MASK;
        // c6 = c16 - modulus[6] - (c5 >> BITS_PER_LIMB); c5 &= LIMB_MASK;
        // c7 = c17 - modulus[7] - (c6 >> BITS_PER_LIMB); c6 &= LIMB_MASK;
        // c8 = c18 - modulus[8] - (c7 >> BITS_PER_LIMB); c7 &= LIMB_MASK;
        // c9 = c19 - modulus[9] - (c8 >> BITS_PER_LIMB); c8 &= LIMB_MASK;
        // long mask = c9 >> BITS_PER_LIMB; // Signed shift!
        //                                                //c9 &= LIMB_MASK;
        // // debugRow("reduced\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);
        // assert(mask==0 || mask==-1);

        // r[0] = (c10 & mask) | (c0 & ~mask);
        // r[1] = (c11 & mask) | (c1 & ~mask);
        // r[2] = (c12 & mask) | (c2 & ~mask);
        // r[3] = (c13 & mask) | (c3 & ~mask);
        // r[4] = (c14 & mask) | (c4 & ~mask);
        // r[5] = (c15 & mask) | (c5 & ~mask);
        // r[6] = (c16 & mask) | (c6 & ~mask);
        // r[7] = (c17 & mask) | (c7 & ~mask);
        // r[8] = (c18 & mask) | (c8 & ~mask);
        // r[9] = (c19 & mask) | (c9 & ~mask);

        // version 3...
        
        
        // long c0 = (a[0] * b[0]);
        // long c1 = (a[0] * b[1]) + (a[1] * b[0]);
        // long c2 = (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0]);
        // long c3 = (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0]);
        // long c4 = (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0]);
        // long c5 = (a[0] * b[5]) + (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]) + (a[5] * b[0]);
        // long c6 = (a[0] * b[6]) + (a[1] * b[5]) + (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]) + (a[5] * b[1]) + (a[6] * b[0]);
        // long c7 = (a[0] * b[7]) + (a[1] * b[6]) + (a[2] * b[5]) + (a[3] * b[4]) + (a[4] * b[3]) + (a[5] * b[2]) + (a[6] * b[1]) + (a[7] * b[0]);
        // long c8 = (a[0] * b[8]) + (a[1] * b[7]) + (a[2] * b[6]) + (a[3] * b[5]) + (a[4] * b[4]) + (a[5] * b[3]) + (a[6] * b[2]) + (a[7] * b[1]) + (a[8] * b[0]);
        // long c9 = (a[0] * b[9]) + (a[1] * b[8]) + (a[2] * b[7]) + (a[3] * b[6]) + (a[4] * b[5]) + (a[5] * b[4]) + (a[6] * b[3]) + (a[7] * b[2]) + (a[8] * b[1]) + (a[9] * b[0]);
        // long c10 = (a[1] * b[9]) + (a[2] * b[8]) + (a[3] * b[7]) + (a[4] * b[6]) + (a[5] * b[5]) + (a[6] * b[4]) + (a[7] * b[3]) + (a[8] * b[2]) + (a[9] * b[1]);
        // long c11 = (a[2] * b[9]) + (a[3] * b[8]) + (a[4] * b[7]) + (a[5] * b[6]) + (a[6] * b[5]) + (a[7] * b[4]) + (a[8] * b[3]) + (a[9] * b[2]);
        // long c12 = (a[3] * b[9]) + (a[4] * b[8]) + (a[5] * b[7]) + (a[6] * b[6]) + (a[7] * b[5]) + (a[8] * b[4]) + (a[9] * b[3]);
        // long c13 = (a[4] * b[9]) + (a[5] * b[8]) + (a[6] * b[7]) + (a[7] * b[6]) + (a[8] * b[5]) + (a[9] * b[4]);
        // long c14 = (a[5] * b[9]) + (a[6] * b[8]) + (a[7] * b[7]) + (a[8] * b[6]) + (a[9] * b[5]);
        // long c15 = (a[6] * b[9]) + (a[7] * b[8]) + (a[8] * b[7]) + (a[9] * b[6]);
        // long c16 = (a[7] * b[9]) + (a[8] * b[8]) + (a[9] * b[7]);
        // long c17 = (a[8] * b[9]) + (a[9] * b[8]);
        // long c18 = (a[9] * b[9]);
        // long c19 = 0;

        
        // long bits_per_limb = BITS_PER_LIMB * 2;
        // long limb_mask = -1L >>> (64 - bits_per_limb);


        // long cc0 = (( c1 & LIMB_MASK) << BITS_PER_LIMB)                          +  c0;
        // long n0 = cc0 & limb_mask;                                                                         cc0 += n0 * modulus2[0];
        // long cc1 = (( c3 & LIMB_MASK) << BITS_PER_LIMB) + ( c1 >> BITS_PER_LIMB) +  c2 + (cc0 >> bits_per_limb) + n0 * modulus2[1];
        // long n1 = cc1 & limb_mask;                                                                                            cc1 += n1 * modulus2[0];
        // long cc2 = (( c5 & LIMB_MASK) << BITS_PER_LIMB) + ( c3 >> BITS_PER_LIMB) +  c4 + (cc1 >> bits_per_limb) + n0 * modulus2[2] + n1 * modulus2[1];
        // long n2 = cc2 & limb_mask;                                                                                                               cc2 += n2 * modulus2[0];
        // long cc3 = (( c7 & LIMB_MASK) << BITS_PER_LIMB) + ( c5 >> BITS_PER_LIMB) +  c6 + (cc2 >> bits_per_limb) + n0 * modulus2[3] + n1 * modulus2[2] + n2 * modulus2[1];
        // long n3 = cc3 & limb_mask;                                                                                                                                  cc3 += n3 * modulus2[0];
        // long cc4 = (( c9 & LIMB_MASK) << BITS_PER_LIMB) + ( c7 >> BITS_PER_LIMB) +  c8 + (cc3 >> bits_per_limb) + n0 * modulus2[4] + n1 * modulus2[3] + n2 * modulus2[2] + n3 * modulus2[1];
        // long n4 = cc4 & limb_mask;                                                                                                                                                     cc4 += n4 * modulus2[0];
        // long cc5 = ((c11 & LIMB_MASK) << BITS_PER_LIMB) + ( c9 >> BITS_PER_LIMB) + c10 + (cc4 >> bits_per_limb)                    + n1 * modulus2[4] + n2 * modulus2[3] + n3 * modulus2[2] + n4 * modulus2[1];
        // long cc6 = ((c13 & LIMB_MASK) << BITS_PER_LIMB) + (c11 >> BITS_PER_LIMB) + c12 + (cc5 >> bits_per_limb)                                       + n2 * modulus2[4] + n3 * modulus2[3] + n4 * modulus2[2];
        // long cc7 = ((c15 & LIMB_MASK) << BITS_PER_LIMB) + (c13 >> BITS_PER_LIMB) + c14 + (cc6 >> bits_per_limb)                                                          + n3 * modulus2[4] + n4 * modulus2[3];
        // long cc8 = ((c17 & LIMB_MASK) << BITS_PER_LIMB) + (c15 >> BITS_PER_LIMB) + c16 + (cc7 >> bits_per_limb)                                                                             + n4 * modulus2[4];
        // long cc9 =                                      + (c17 >> BITS_PER_LIMB) + c18 + (cc8 >> bits_per_limb);

        // cc5 &= limb_mask;
        // cc6 &= limb_mask;
        // cc7 &= limb_mask;
        // cc8 &= limb_mask;
        // cc9 &= limb_mask;

        // cc0 = cc5 - modulus2[0];
        // cc1 = cc6 - modulus2[1] - (cc0 >> bits_per_limb); cc0 &= limb_mask;
        // cc2 = cc7 - modulus2[2] - (cc1 >> bits_per_limb); cc1 &= limb_mask;
        // cc3 = cc8 - modulus2[3] - (cc2 >> bits_per_limb); cc2 &= limb_mask;
        // cc4 = cc9 - modulus2[4] - (cc3 >> bits_per_limb); cc3 &= limb_mask;

        // long mask = cc9 >> bits_per_limb; // Signed shift!
        // //                                                //c9 &= LIMB_MASK;
        // // // debugRow("reduced\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);
        // assert(mask==0 || mask==-1);

        // r[0] =  ((c5 & mask) | (c0 & ~mask))                 & LIMB_MASK;
        // r[1] = (((c5 & mask) | (c0 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        // r[2] =  ((c6 & mask) | (c1 & ~mask))                 & LIMB_MASK;
        // r[3] = (((c6 & mask) | (c1 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        // r[4] =  ((c7 & mask) | (c2 & ~mask))                 & LIMB_MASK;
        // r[5] = (((c7 & mask) | (c2 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        // r[6] =  ((c8 & mask) | (c3 & ~mask))                 & LIMB_MASK;
        // r[7] = (((c8 & mask) | (c3 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        // r[8] =  ((c9 & mask) | (c4 & ~mask))                 & LIMB_MASK;
        // r[9] = (((c9 & mask) | (c4 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;

        // version 4...
        
        // long c0 = (a[0] * b[0]);
        // long n0 = c0 & LIMB_MASK;           c0 = (n0 * modulus[0]) >> BITS_PER_LIMB;
        // long c1 = (a[0] * b[1]) + (a[1] * b[0]) + n0 * modulus[1] + c0;
        // long n1 = c1 & LIMB_MASK;                                                  c1 = (n1 * modulus[0]) >> BITS_PER_LIMB;
        // long c2 = (a[0] * b[2]) + (a[1] * b[1]) + n0 * modulus[2] + c1 + (a[2] * b[0]) + n1 * modulus[1];
        // long n2 = c2 & LIMB_MASK;                                                                                    c2 = (n2 * modulus[0]) >> BITS_PER_LIMB;
        // long c3 = (a[0] * b[3]) + (a[1] * b[2]) + n0 * modulus[3] + c2 + (a[2] * b[1]) + n1 * modulus[2] + (a[3] * b[0]) + n2 * modulus[1];
        // long n3 = c3 & LIMB_MASK;                                                                                                                      c3 = (n3 * modulus[0]) >> BITS_PER_LIMB;
        // long c4 = (a[0] * b[4]) + (a[1] * b[3]) + n0 * modulus[4] + c3 + (a[2] * b[2]) + n1 * modulus[3] + (a[3] * b[1]) + n2 * modulus[2] + (a[4] * b[0]) + n3 * modulus[1];
        // long n4 = c4 & LIMB_MASK;                                                                                                                                                        c4 = (n4 * modulus[0]) >> BITS_PER_LIMB;
        // long c5 = (a[0] * b[5]) + (a[1] * b[4]) + n0 * modulus[5] + c4 + (a[2] * b[3]) + n1 * modulus[4] + (a[3] * b[2]) + n2 * modulus[3] + (a[4] * b[1]) + n3 * modulus[2] + (a[5] * b[0]) + n4 * modulus[1];
        // long n5 = c5 & LIMB_MASK;                                                                                                                                                                                          c5 = (n5 * modulus[0]) >> BITS_PER_LIMB;
        // long c6 = (a[0] * b[6]) + (a[1] * b[5]) + n0 * modulus[6] + c5 + (a[2] * b[4]) + n1 * modulus[5] + (a[3] * b[3]) + n2 * modulus[4] + (a[4] * b[2]) + n3 * modulus[3] + (a[5] * b[1]) + n4 * modulus[2] + (a[6] * b[0]) + n5 * modulus[1];
        // long n6 = c6 & LIMB_MASK;                                                                                                                                                                                                                            c6 = (n6 * modulus[0]) >> BITS_PER_LIMB;
        // long c7 = (a[0] * b[7]) + (a[1] * b[6]) + n0 * modulus[7] + c6 + (a[2] * b[5]) + n1 * modulus[6] + (a[3] * b[4]) + n2 * modulus[5] + (a[4] * b[3]) + n3 * modulus[4] + (a[5] * b[2]) + n4 * modulus[3] + (a[6] * b[1]) + n5 * modulus[2] + (a[7] * b[0]) + n6 * modulus[1];
        // long n7 = c7 & LIMB_MASK;                                                                                                                                                                                                                                                              c7 = (n7 * modulus[0]) >> BITS_PER_LIMB;
        // long c8 = (a[0] * b[8]) + (a[1] * b[7]) + n0 * modulus[8] + c7 + (a[2] * b[6]) + n1 * modulus[7] + (a[3] * b[5]) + n2 * modulus[6] + (a[4] * b[4]) + n3 * modulus[5] + (a[5] * b[3]) + n4 * modulus[4] + (a[6] * b[2]) + n5 * modulus[3] + (a[7] * b[1]) + n6 * modulus[2] + (a[8] * b[0]) + n7 * modulus[1];
        // long n8 = c8 & LIMB_MASK;                                                                                                                                                                                                                                                                                                c8 = (n8 * modulus[0]) >> BITS_PER_LIMB;
        // long c9 = (a[0] * b[9]) + (a[1] * b[8]) + n0 * modulus[9] + c8 + (a[2] * b[7]) + n1 * modulus[8] + (a[3] * b[6]) + n2 * modulus[7] + (a[4] * b[5]) + n3 * modulus[6] + (a[5] * b[4]) + n4 * modulus[5] + (a[6] * b[3]) + n5 * modulus[4] + (a[7] * b[2]) + n6 * modulus[3] + (a[8] * b[1]) + n7 * modulus[2] + (a[9] * b[0]) + n8 * modulus[1];
        // long n9 = c9 & LIMB_MASK;                                                                                                                                                                                                                                                                                                                  c9 = (n9 * modulus[0]) >> BITS_PER_LIMB;
        // long c10 =                (a[1] * b[9])                   + c9 + (a[2] * b[8]) + n1 * modulus[9] + (a[3] * b[7]) + n2 * modulus[8] + (a[4] * b[6]) + n3 * modulus[7] + (a[5] * b[5]) + n4 * modulus[6] + (a[6] * b[4]) + n5 * modulus[5] + (a[7] * b[3]) + n6 * modulus[4] + (a[8] * b[2]) + n7 * modulus[3] + (a[9] * b[1]) + n8 * modulus[2] + n9 * modulus[1];
        // long c11 =                                                       (a[2] * b[9])                   + (a[3] * b[8]) + n2 * modulus[9] + (a[4] * b[7]) + n3 * modulus[8] + (a[5] * b[6]) + n4 * modulus[7] + (a[6] * b[5]) + n5 * modulus[6] + (a[7] * b[4]) + n6 * modulus[5] + (a[8] * b[3]) + n7 * modulus[4] + (a[9] * b[2]) + n8 * modulus[3] + n9 * modulus[2];
        // long c12 =                                                                                         (a[3] * b[9])                   + (a[4] * b[8]) + n3 * modulus[9] + (a[5] * b[7]) + n4 * modulus[8] + (a[6] * b[6]) + n5 * modulus[7] + (a[7] * b[5]) + n6 * modulus[6] + (a[8] * b[4]) + n7 * modulus[5] + (a[9] * b[3]) + n8 * modulus[4] + n9 * modulus[3];
        // long c13 =                                                                                                                           (a[4] * b[9])                   + (a[5] * b[8]) + n4 * modulus[9] + (a[6] * b[7]) + n5 * modulus[8] + (a[7] * b[6]) + n6 * modulus[7] + (a[8] * b[5]) + n7 * modulus[6] + (a[9] * b[4]) + n8 * modulus[5] + n9 * modulus[4];
        // long c14 =                                                                                                                                                             (a[5] * b[9])                   + (a[6] * b[8]) + n5 * modulus[9] + (a[7] * b[7]) + n6 * modulus[8] + (a[8] * b[6]) + n7 * modulus[7] + (a[9] * b[5]) + n8 * modulus[6] + n9 * modulus[5];
        // long c15 =                                                                                                                                                                                               (a[6] * b[9])                   + (a[7] * b[8]) + n6 * modulus[9] + (a[8] * b[7]) + n7 * modulus[8] + (a[9] * b[6]) + n8 * modulus[7] + n9 * modulus[6];
        // long c16 =                                                                                                                                                                                                                                 (a[7] * b[9])                   + (a[8] * b[8]) + n7 * modulus[9] + (a[9] * b[7]) + n8 * modulus[8] + n9 * modulus[7];
        // long c17 =                                                                                                                                                                                                                                                                   (a[8] * b[9])                   + (a[9] * b[8]) + n8 * modulus[9] + n9 * modulus[8];
        // long c18 =                                                                                                                                                                                                                                                                                                     (a[9] * b[9])                   + n9 * modulus[9];
        // long c19 = 0;

        // c11 += c10 >> BITS_PER_LIMB; c10 &= LIMB_MASK;
        // c12 += c11 >> BITS_PER_LIMB; c11 &= LIMB_MASK;
        // c13 += c12 >> BITS_PER_LIMB; c12 &= LIMB_MASK;
        // c14 += c13 >> BITS_PER_LIMB; c13 &= LIMB_MASK;
        // c15 += c14 >> BITS_PER_LIMB; c14 &= LIMB_MASK;
        // c16 += c15 >> BITS_PER_LIMB; c15 &= LIMB_MASK;
        // c17 += c16 >> BITS_PER_LIMB; c16 &= LIMB_MASK;
        // c18 += c17 >> BITS_PER_LIMB; c17 &= LIMB_MASK;
        // c19 += c18 >> BITS_PER_LIMB; c18 &= LIMB_MASK;

        // c0 = c10 - modulus[0];
        // c1 = c11 - modulus[1] - (c0 >> BITS_PER_LIMB); c0 &= LIMB_MASK;
        // c2 = c12 - modulus[2] - (c1 >> BITS_PER_LIMB); c1 &= LIMB_MASK;
        // c3 = c13 - modulus[3] - (c2 >> BITS_PER_LIMB); c2 &= LIMB_MASK;
        // c4 = c14 - modulus[4] - (c3 >> BITS_PER_LIMB); c3 &= LIMB_MASK;
        // c5 = c15 - modulus[5] - (c4 >> BITS_PER_LIMB); c4 &= LIMB_MASK;
        // c6 = c16 - modulus[6] - (c5 >> BITS_PER_LIMB); c5 &= LIMB_MASK;
        // c7 = c17 - modulus[7] - (c6 >> BITS_PER_LIMB); c6 &= LIMB_MASK;
        // c8 = c18 - modulus[8] - (c7 >> BITS_PER_LIMB); c7 &= LIMB_MASK;
        // c9 = c19 - modulus[9] - (c8 >> BITS_PER_LIMB); c8 &= LIMB_MASK;
        // long mask = c9 >> BITS_PER_LIMB; // Signed shift!
        //                                                //c9 &= LIMB_MASK;
        // // debugRow("reduced\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);
        // assert(mask==0 || mask==-1);

        // r[0] = (c10 & mask) | (c0 & ~mask);
        // r[1] = (c11 & mask) | (c1 & ~mask);
        // r[2] = (c12 & mask) | (c2 & ~mask);
        // r[3] = (c13 & mask) | (c3 & ~mask);
        // r[4] = (c14 & mask) | (c4 & ~mask);
        // r[5] = (c15 & mask) | (c5 & ~mask);
        // r[6] = (c16 & mask) | (c6 & ~mask);
        // r[7] = (c17 & mask) | (c7 & ~mask);
        // r[8] = (c18 & mask) | (c8 & ~mask);
        // r[9] = (c19 & mask) | (c9 & ~mask);

        // Version 5

        // long c0 = (a[0] * b[0]);
        // long c1 = (a[0] * b[1]) + (a[1] * b[0]);
        // long c2 = (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0]);
        // long c3 = (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0]);
        // long c4 = (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0]);
        // long c5 = (a[0] * b[5]) + (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]) + (a[5] * b[0]);
        // long c6 = (a[0] * b[6]) + (a[1] * b[5]) + (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]) + (a[5] * b[1]) + (a[6] * b[0]);
        // long c7 = (a[0] * b[7]) + (a[1] * b[6]) + (a[2] * b[5]) + (a[3] * b[4]) + (a[4] * b[3]) + (a[5] * b[2]) + (a[6] * b[1]) + (a[7] * b[0]);
        // long c8 = (a[0] * b[8]) + (a[1] * b[7]) + (a[2] * b[6]) + (a[3] * b[5]) + (a[4] * b[4]) + (a[5] * b[3]) + (a[6] * b[2]) + (a[7] * b[1]) + (a[8] * b[0]);
        // long c9 = (a[0] * b[9]) + (a[1] * b[8]) + (a[2] * b[7]) + (a[3] * b[6]) + (a[4] * b[5]) + (a[5] * b[4]) + (a[6] * b[3]) + (a[7] * b[2]) + (a[8] * b[1]) + (a[9] * b[0]);
        // long c10 = (a[1] * b[9]) + (a[2] * b[8]) + (a[3] * b[7]) + (a[4] * b[6]) + (a[5] * b[5]) + (a[6] * b[4]) + (a[7] * b[3]) + (a[8] * b[2]) + (a[9] * b[1]);
        // long c11 = (a[2] * b[9]) + (a[3] * b[8]) + (a[4] * b[7]) + (a[5] * b[6]) + (a[6] * b[5]) + (a[7] * b[4]) + (a[8] * b[3]) + (a[9] * b[2]);
        // long c12 = (a[3] * b[9]) + (a[4] * b[8]) + (a[5] * b[7]) + (a[6] * b[6]) + (a[7] * b[5]) + (a[8] * b[4]) + (a[9] * b[3]);
        // long c13 = (a[4] * b[9]) + (a[5] * b[8]) + (a[6] * b[7]) + (a[7] * b[6]) + (a[8] * b[5]) + (a[9] * b[4]);
        // long c14 = (a[5] * b[9]) + (a[6] * b[8]) + (a[7] * b[7]) + (a[8] * b[6]) + (a[9] * b[5]);
        // long c15 = (a[6] * b[9]) + (a[7] * b[8]) + (a[8] * b[7]) + (a[9] * b[6]);
        // long c16 = (a[7] * b[9]) + (a[8] * b[8]) + (a[9] * b[7]);
        // long c17 = (a[8] * b[9]) + (a[9] * b[8]);
        // long c18 = (a[9] * b[9]);
        // long c19 = 0;

        
        // // long bits_per_limb = BITS_PER_LIMB * 2;
        // // long limb_mask = -1L >>> (64 - bits_per_limb);

        // long cc0 =                          (( c1 & LIMB_MASK) << BITS_PER_LIMB) +  c0;
        // long cc1 = ( c1 >> BITS_PER_LIMB) + (( c3 & LIMB_MASK) << BITS_PER_LIMB) +  c2;
        // long cc2 = ( c3 >> BITS_PER_LIMB) + (( c5 & LIMB_MASK) << BITS_PER_LIMB) +  c4;
        // long cc3 = ( c5 >> BITS_PER_LIMB) + (( c7 & LIMB_MASK) << BITS_PER_LIMB) +  c6;
        // long cc4 = ( c7 >> BITS_PER_LIMB) + (( c9 & LIMB_MASK) << BITS_PER_LIMB) +  c8;
        // long cc5 = ( c9 >> BITS_PER_LIMB) + ((c11 & LIMB_MASK) << BITS_PER_LIMB) + c10;
        // long cc6 = (c11 >> BITS_PER_LIMB) + ((c13 & LIMB_MASK) << BITS_PER_LIMB) + c12;
        // long cc7 = (c13 >> BITS_PER_LIMB) + ((c15 & LIMB_MASK) << BITS_PER_LIMB) + c14;
        // long cc8 = (c15 >> BITS_PER_LIMB) + ((c17 & LIMB_MASK) << BITS_PER_LIMB) + c16;
        // long cc9 = (c17 >> BITS_PER_LIMB)                                        + c18;

        // long n0 = cc0 & LIMB_MASK;
        // cc0 += n0 * modulus[0]; cc0 >>= BITS_PER_LIMB;
        // cc1 += n0 * modulus[1];
        // cc2 += n0 * modulus[2];
        // cc3 += n0 * modulus[3];
        // cc4 += n0 * modulus[4];
        // cc5 += n0 * modulus[5];
        // cc6 += n0 * modulus[6];
        // cc7 += n0 * modulus[7];
        // cc8 += n0 * modulus[8];
        // cc9 += n0 * modulus[9];

        // long n1 = cc0 & LIMB_MASK;
        // cc0 += n1 * modulus[0];
        // cc1 += n1 * modulus[1];
        // cc2 += n1 * modulus[2];
        // cc3 += n1 * modulus[3];
        // cc4 += n1 * modulus[4];
        // cc5 += n1 * modulus[5];
        // cc6 += n1 * modulus[6];
        // cc7 += n1 * modulus[7];
        // cc8 += n1 * modulus[8];
        // cc9 += n1 * modulus[9];


        // long n0 = cc0 & limb_mask;                                                                         cc0 += n0 * modulus2[0];
        // long n1 = cc1 & limb_mask;                                                                                            cc1 += n1 * modulus2[0];
        // long n2 = cc2 & limb_mask;                                                                                                               cc2 += n2 * modulus2[0];
        // long n3 = cc3 & limb_mask;                                                                                                                                  cc3 += n3 * modulus2[0];
        // long n4 = cc4 & limb_mask;                                                                                                                                                     cc4 += n4 * modulus2[0];
        
        // long cc0 = (( c1 & LIMB_MASK) << BITS_PER_LIMB)                          +  c0;
        // long cc1 = (( c3 & LIMB_MASK) << BITS_PER_LIMB) + ( c1 >> BITS_PER_LIMB) +  c2 + (cc0 >> bits_per_limb) + n0 * modulus2[1];
        // long cc2 = (( c5 & LIMB_MASK) << BITS_PER_LIMB) + ( c3 >> BITS_PER_LIMB) +  c4 + (cc1 >> bits_per_limb) + n0 * modulus2[2] + n1 * modulus2[1];
        // long cc3 = (( c7 & LIMB_MASK) << BITS_PER_LIMB) + ( c5 >> BITS_PER_LIMB) +  c6 + (cc2 >> bits_per_limb) + n0 * modulus2[3] + n1 * modulus2[2] + n2 * modulus2[1];
        // long cc4 = (( c9 & LIMB_MASK) << BITS_PER_LIMB) + ( c7 >> BITS_PER_LIMB) +  c8 + (cc3 >> bits_per_limb) + n0 * modulus2[4] + n1 * modulus2[3] + n2 * modulus2[2] + n3 * modulus2[1];
        // long cc5 = ((c11 & LIMB_MASK) << BITS_PER_LIMB) + ( c9 >> BITS_PER_LIMB) + c10 + (cc4 >> bits_per_limb)                    + n1 * modulus2[4] + n2 * modulus2[3] + n3 * modulus2[2] + n4 * modulus2[1];
        // long cc6 = ((c13 & LIMB_MASK) << BITS_PER_LIMB) + (c11 >> BITS_PER_LIMB) + c12 + (cc5 >> bits_per_limb)                                       + n2 * modulus2[4] + n3 * modulus2[3] + n4 * modulus2[2];
        // long cc7 = ((c15 & LIMB_MASK) << BITS_PER_LIMB) + (c13 >> BITS_PER_LIMB) + c14 + (cc6 >> bits_per_limb)                                                          + n3 * modulus2[4] + n4 * modulus2[3];
        // long cc8 = ((c17 & LIMB_MASK) << BITS_PER_LIMB) + (c15 >> BITS_PER_LIMB) + c16 + (cc7 >> bits_per_limb)                                                                             + n4 * modulus2[4];
        // long cc9 =                                      + (c17 >> BITS_PER_LIMB) + c18 + (cc8 >> bits_per_limb);

        // cc5 &= limb_mask;
        // cc6 &= limb_mask;
        // cc7 &= limb_mask;
        // cc8 &= limb_mask;
        // cc9 &= limb_mask;

        // Version 6

        // Convert to 52-bit limbs (FIXME: make BITS_PER_LIMB = 52 so this is not needed!)
        long aa0 = a[0] + (a[1] << BITS_PER_LIMB);
        long aa1 = a[2] + (a[3] << BITS_PER_LIMB);
        long aa2 = a[4] + (a[5] << BITS_PER_LIMB);
        long aa3 = a[6] + (a[7] << BITS_PER_LIMB);
        long aa4 = a[8] + (a[9] << BITS_PER_LIMB);

        long bb0 = b[0] + (b[1] << BITS_PER_LIMB);
        long bb1 = b[2] + (b[3] << BITS_PER_LIMB);
        long bb2 = b[4] + (b[5] << BITS_PER_LIMB);
        long bb3 = b[6] + (b[7] << BITS_PER_LIMB);
        long bb4 = b[8] + (b[9] << BITS_PER_LIMB);

        final long bits_per_limb = BITS_PER_LIMB * 2;
        final long limb_mask = -1L >>> (64 - bits_per_limb);
        final long shift1 = 64 - bits_per_limb;     // 12
        final long shift2 = bits_per_limb; //bits_per_limb - shift1; // 40

        long d0, d1, d2, d3, d4; // low digits from multiplication
        long dd0, dd1, dd2, dd3, dd4; // high digits from multiplication
        long n, n0, n1, n2, n3, n4, nn0, nn1, nn2, nn3, nn4; // modulus multiple digits
        long c0, c1, c2, c3, c4, c5, c6, c7, c8, c9; // multiplication result digits for each column
        debugRow("aa\n", aa0, aa1, aa2, aa3, aa4);
        debugRow("bb\n", bb0, bb1, bb2, bb3, bb4);

        // Row 0 - multiply by aa0 and reduce out c0
        d0 = aa0 * bb0; dd0 = Math.unsignedMultiplyHigh(aa0, bb0) << shift1 | (d0 >>> shift2); d0 &= limb_mask; n = d0;
        d1 = aa0 * bb1; dd1 = Math.unsignedMultiplyHigh(aa0, bb1) << shift1 | (d1 >>> shift2); d1 &= limb_mask;
        d2 = aa0 * bb2; dd2 = Math.unsignedMultiplyHigh(aa0, bb2) << shift1 | (d2 >>> shift2); d2 &= limb_mask;
        d3 = aa0 * bb3; dd3 = Math.unsignedMultiplyHigh(aa0, bb3) << shift1 | (d3 >>> shift2); d3 &= limb_mask;
        d4 = aa0 * bb4; dd4 = Math.unsignedMultiplyHigh(aa0, bb4) << shift1 | (d4 >>> shift2); d4 &= limb_mask;

        // debugRow("row 0.1\n", d0, d1+dd0, d2+dd1, d3+dd2, d4+dd3, dd4);

        n0 = n * modulus2[0]; nn0 = Math.unsignedMultiplyHigh(n, modulus2[0]) << shift1 | (n0 >>> shift2); n0 &= limb_mask;
        n1 = n * modulus2[1]; nn1 = Math.unsignedMultiplyHigh(n, modulus2[1]) << shift1 | (n1 >>> shift2); n1 &= limb_mask;
        n2 = n * modulus2[2]; nn2 = Math.unsignedMultiplyHigh(n, modulus2[2]) << shift1 | (n2 >>> shift2); n2 &= limb_mask;
        n3 = n * modulus2[3]; nn3 = Math.unsignedMultiplyHigh(n, modulus2[3]) << shift1 | (n3 >>> shift2); n3 &= limb_mask;
        n4 = n * modulus2[4]; nn4 = Math.unsignedMultiplyHigh(n, modulus2[4]) << shift1 | (n4 >>> shift2); n4 &= limb_mask;

        // debugRow("row 0.2\n", n0, n1+nn0, n2+nn1, n3+nn2, n4+nn3, nn4);
        
        dd0 += nn0; d0 += n0;
        dd1 += nn1; d1 += n1;
        dd2 += nn2; d2 += n2;
        dd3 += nn3; d3 += n3;
        dd4 += nn4; d4 += n4;
        
        c1 = d1 + dd0 + (d0 >>> bits_per_limb);
        c2 = d2 + dd1;
        c3 = d3 + dd2;
        c4 = d4 + dd3;
        c5 = dd4;

        debugRow("row 0\n", c1, c2, c3, c4, c5);

        // Row 1 - multiply by aa1 and reduce out c1
        d0 = aa1 * bb0; dd0 = Math.unsignedMultiplyHigh(aa1, bb0) << shift1 | (d0 >>> shift2); d0 &= limb_mask; d0 += c1; n = d0 & limb_mask;
        d1 = aa1 * bb1; dd1 = Math.unsignedMultiplyHigh(aa1, bb1) << shift1 | (d1 >>> shift2); d1 &= limb_mask;
        d2 = aa1 * bb2; dd2 = Math.unsignedMultiplyHigh(aa1, bb2) << shift1 | (d2 >>> shift2); d2 &= limb_mask;
        d3 = aa1 * bb3; dd3 = Math.unsignedMultiplyHigh(aa1, bb3) << shift1 | (d3 >>> shift2); d3 &= limb_mask;
        d4 = aa1 * bb4; dd4 = Math.unsignedMultiplyHigh(aa1, bb4) << shift1 | (d4 >>> shift2); d4 &= limb_mask;

        n0 = n * modulus2[0]; dd0 += Math.unsignedMultiplyHigh(n, modulus2[0]) << shift1 | (n0 >>> shift2); d0 += n0 & limb_mask;
        n1 = n * modulus2[1]; dd1 += Math.unsignedMultiplyHigh(n, modulus2[1]) << shift1 | (n1 >>> shift2); d1 += n1 & limb_mask;
        n2 = n * modulus2[2]; dd2 += Math.unsignedMultiplyHigh(n, modulus2[2]) << shift1 | (n2 >>> shift2); d2 += n2 & limb_mask;
        n3 = n * modulus2[3]; dd3 += Math.unsignedMultiplyHigh(n, modulus2[3]) << shift1 | (n3 >>> shift2); d3 += n3 & limb_mask;
        n4 = n * modulus2[4]; dd4 += Math.unsignedMultiplyHigh(n, modulus2[4]) << shift1 | (n4 >>> shift2); d4 += n4 & limb_mask;

        c2 += d1 + dd0 + (d0 >>> bits_per_limb);
        c3 += d2 + dd1;
        c4 += d3 + dd2;
        c5 += d4 + dd3;
        c6 = dd4;

        debugRow("row 1\n", c2, c3, c4, c5, c6);

        // Row 2 - multiply by aa2 and reduce out c2
        d0 = aa2 * bb0; dd0 = Math.unsignedMultiplyHigh(aa2, bb0) << shift1 | (d0 >>> shift2); d0 &= limb_mask; d0 += c2; n = d0 & limb_mask;
        d1 = aa2 * bb1; dd1 = Math.unsignedMultiplyHigh(aa2, bb1) << shift1 | (d1 >>> shift2); d1 &= limb_mask;
        d2 = aa2 * bb2; dd2 = Math.unsignedMultiplyHigh(aa2, bb2) << shift1 | (d2 >>> shift2); d2 &= limb_mask;
        d3 = aa2 * bb3; dd3 = Math.unsignedMultiplyHigh(aa2, bb3) << shift1 | (d3 >>> shift2); d3 &= limb_mask;
        d4 = aa2 * bb4; dd4 = Math.unsignedMultiplyHigh(aa2, bb4) << shift1 | (d4 >>> shift2); d4 &= limb_mask;

        n0 = n * modulus2[0]; dd0 += Math.unsignedMultiplyHigh(n, modulus2[0]) << shift1 | (n0 >>> shift2); d0 += n0 & limb_mask;
        n1 = n * modulus2[1]; dd1 += Math.unsignedMultiplyHigh(n, modulus2[1]) << shift1 | (n1 >>> shift2); d1 += n1 & limb_mask;
        n2 = n * modulus2[2]; dd2 += Math.unsignedMultiplyHigh(n, modulus2[2]) << shift1 | (n2 >>> shift2); d2 += n2 & limb_mask;
        n3 = n * modulus2[3]; dd3 += Math.unsignedMultiplyHigh(n, modulus2[3]) << shift1 | (n3 >>> shift2); d3 += n3 & limb_mask;
        n4 = n * modulus2[4]; dd4 += Math.unsignedMultiplyHigh(n, modulus2[4]) << shift1 | (n4 >>> shift2); d4 += n4 & limb_mask;

        c3 += d1 + dd0 + (d0 >>> bits_per_limb);
        c4 += d2 + dd1;
        c5 += d3 + dd2;
        c6 += d4 + dd3;
        c7 = dd4;

        debugRow("row 2\n", c3, c4, c5, c6, c7);

        // Row 3 - multiply by aa3 and reduce out c3
        d0 = aa3 * bb0; dd0 = Math.unsignedMultiplyHigh(aa3, bb0) << shift1 | (d0 >>> shift2); d0 &= limb_mask; d0 += c3; n = d0 & limb_mask;
        d1 = aa3 * bb1; dd1 = Math.unsignedMultiplyHigh(aa3, bb1) << shift1 | (d1 >>> shift2); d1 &= limb_mask;
        d2 = aa3 * bb2; dd2 = Math.unsignedMultiplyHigh(aa3, bb2) << shift1 | (d2 >>> shift2); d2 &= limb_mask;
        d3 = aa3 * bb3; dd3 = Math.unsignedMultiplyHigh(aa3, bb3) << shift1 | (d3 >>> shift2); d3 &= limb_mask;
        d4 = aa3 * bb4; dd4 = Math.unsignedMultiplyHigh(aa3, bb4) << shift1 | (d4 >>> shift2); d4 &= limb_mask;

        n0 = n * modulus2[0]; dd0 += Math.unsignedMultiplyHigh(n, modulus2[0]) << shift1 | (n0 >>> shift2); d0 += n0 & limb_mask;
        n1 = n * modulus2[1]; dd1 += Math.unsignedMultiplyHigh(n, modulus2[1]) << shift1 | (n1 >>> shift2); d1 += n1 & limb_mask;
        n2 = n * modulus2[2]; dd2 += Math.unsignedMultiplyHigh(n, modulus2[2]) << shift1 | (n2 >>> shift2); d2 += n2 & limb_mask;
        n3 = n * modulus2[3]; dd3 += Math.unsignedMultiplyHigh(n, modulus2[3]) << shift1 | (n3 >>> shift2); d3 += n3 & limb_mask;
        n4 = n * modulus2[4]; dd4 += Math.unsignedMultiplyHigh(n, modulus2[4]) << shift1 | (n4 >>> shift2); d4 += n4 & limb_mask;

        c4 += d1 + dd0 + (d0 >>> bits_per_limb);
        c5 += d2 + dd1;
        c6 += d3 + dd2;
        c7 += d4 + dd3;
        c8 = dd4;

        debugRow("row 3\n", c4, c5, c6, c7, c8);

        // Row 4 - multiply by aa3 and reduce out c4
        d0 = aa4 * bb0; dd0 = Math.unsignedMultiplyHigh(aa4, bb0) << shift1 | (d0 >>> shift2); d0 &= limb_mask; d0 += c4; n = d0 & limb_mask;
        d1 = aa4 * bb1; dd1 = Math.unsignedMultiplyHigh(aa4, bb1) << shift1 | (d1 >>> shift2); d1 &= limb_mask;
        d2 = aa4 * bb2; dd2 = Math.unsignedMultiplyHigh(aa4, bb2) << shift1 | (d2 >>> shift2); d2 &= limb_mask;
        d3 = aa4 * bb3; dd3 = Math.unsignedMultiplyHigh(aa4, bb3) << shift1 | (d3 >>> shift2); d3 &= limb_mask;
        d4 = aa4 * bb4; dd4 = Math.unsignedMultiplyHigh(aa4, bb4) << shift1 | (d4 >>> shift2); d4 &= limb_mask;

        n0 = n * modulus2[0]; dd0 += Math.unsignedMultiplyHigh(n, modulus2[0]) << shift1 | (n0 >>> shift2); d0 += n0 & limb_mask;
        n1 = n * modulus2[1]; dd1 += Math.unsignedMultiplyHigh(n, modulus2[1]) << shift1 | (n1 >>> shift2); d1 += n1 & limb_mask;
        n2 = n * modulus2[2]; dd2 += Math.unsignedMultiplyHigh(n, modulus2[2]) << shift1 | (n2 >>> shift2); d2 += n2 & limb_mask;
        n3 = n * modulus2[3]; dd3 += Math.unsignedMultiplyHigh(n, modulus2[3]) << shift1 | (n3 >>> shift2); d3 += n3 & limb_mask;
        n4 = n * modulus2[4]; dd4 += Math.unsignedMultiplyHigh(n, modulus2[4]) << shift1 | (n4 >>> shift2); d4 += n4 & limb_mask;

        c5 += d1 + dd0 + (d0 >>> bits_per_limb);
        c6 += d2 + dd1 + (c5 >>> bits_per_limb);
        c7 += d3 + dd2 + (c6 >>> bits_per_limb);
        c8 += d4 + dd3 + (c7 >>> bits_per_limb);
        c9 =       dd4 + (c8 >>> bits_per_limb);

        c5 &= limb_mask;
        c6 &= limb_mask;
        c7 &= limb_mask;
        c8 &= limb_mask;
        // cc9 &= limb_mask;

        debugRow("row 4\n", c5, c6, c7, c8, c9);

        c0 = c5 - modulus2[0];
        c1 = c6 - modulus2[1] + (c0 >> bits_per_limb); c0 &= limb_mask;
        c2 = c7 - modulus2[2] + (c1 >> bits_per_limb); c1 &= limb_mask;
        c3 = c8 - modulus2[3] + (c2 >> bits_per_limb); c2 &= limb_mask;
        c4 = c9 - modulus2[4] + (c3 >> bits_per_limb); c3 &= limb_mask;

        long mask = c4 >> bits_per_limb; // Signed shift!
        //                                                //c9 &= LIMB_MASK;
        debugRow("reduced\n", c0, c1, c2, c3, c4);
        assert(mask==0 || mask==-1);

        r[0] =  ((c5 & mask) | (c0 & ~mask))                 & LIMB_MASK;
        r[1] = (((c5 & mask) | (c0 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        r[2] =  ((c6 & mask) | (c1 & ~mask))                 & LIMB_MASK;
        r[3] = (((c6 & mask) | (c1 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        r[4] =  ((c7 & mask) | (c2 & ~mask))                 & LIMB_MASK;
        r[5] = (((c7 & mask) | (c2 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        r[6] =  ((c8 & mask) | (c3 & ~mask))                 & LIMB_MASK;
        r[7] = (((c8 & mask) | (c3 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
        r[8] =  ((c9 & mask) | (c4 & ~mask))                 & LIMB_MASK;
        r[9] = (((c9 & mask) | (c4 & ~mask))>>BITS_PER_LIMB) & LIMB_MASK;
    }
    
    @Override
    protected void square(long[] a, long[] r) {
        debugRow("a =\n", a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]);
        //debugRow("b =\n", b[0], b[1], b[2], b[3], b[4], a[5], a[6], a[7], a[8], a[9]);

        long c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, n;
        c10 = c11 = c12 = c13 = c14 = c15 = c16 = c17 = c18 = c19 = 0;

        c0  = (a[0] * a[0]);
        n = c0&LIMB_MASK;    c0 += n * modulus[0];
        c1  =  (2 * a[0] * a[1]) + n * modulus[1];
        c2  =  (2 * a[0] * a[2]) + n * modulus[2];
        c3  =  (2 * a[0] * a[3]) + n * modulus[3];
        c4  =  (2 * a[0] * a[4]) + n * modulus[4];
        c5  =  (2 * a[0] * a[5]) + n * modulus[5];
        c6  =  (2 * a[0] * a[6]) + n * modulus[6];
        c7  =  (2 * a[0] * a[7]) + n * modulus[7];
        c8  =  (2 * a[0] * a[8]) + n * modulus[8];
        c9  =  (2 * a[0] * a[9]) + n * modulus[9];
        debugRow("row 1\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);

        c1  +=   (c0 >> BITS_PER_LIMB);
        n = c1&LIMB_MASK;    c1 += n * modulus[0];
        c2  += (    a[1] * a[1]) + n * modulus[1];
        c3  += (2 * a[1] * a[2]) + n * modulus[2];
        c4  += (2 * a[1] * a[3]) + n * modulus[3];
        c5  += (2 * a[1] * a[4]) + n * modulus[4];
        c6  += (2 * a[1] * a[5]) + n * modulus[5];
        c7  += (2 * a[1] * a[6]) + n * modulus[6];
        c8  += (2 * a[1] * a[7]) + n * modulus[7];
        c9  += (2 * a[1] * a[8]) + n * modulus[8];
        c10 += (2 * a[1] * a[9]) + n * modulus[9];
        debugRow("row 2\n", c1, c2, c3, c4, c5, c6, c7, c8, c9, c10);

        c2  += (c1 >> BITS_PER_LIMB);
        n = c2&LIMB_MASK;    c2 += n * modulus[0];
        c3  +=                     n * modulus[1];
        c4  += (    a[2] * a[2]) + n * modulus[2];
        c5  += (2 * a[2] * a[3]) + n * modulus[3];
        c6  += (2 * a[2] * a[4]) + n * modulus[4];
        c7  += (2 * a[2] * a[5]) + n * modulus[5];
        c8  += (2 * a[2] * a[6]) + n * modulus[6];
        c9  += (2 * a[2] * a[7]) + n * modulus[7];
        c10 += (2 * a[2] * a[8]) + n * modulus[8];
        c11 += (2 * a[2] * a[9]) + n * modulus[9];
        debugRow("row 3\n", c2, c3, c4, c5, c6, c7, c8, c9, c10, c11);

        c3  += (c2 >> BITS_PER_LIMB);
        n = c3&LIMB_MASK;    c3 += n * modulus[0];
        c4  +=                     n * modulus[1];
        c5  +=                     n * modulus[2];
        c6  += (    a[3] * a[3]) + n * modulus[3];
        c7  += (2 * a[3] * a[4]) + n * modulus[4];
        c8  += (2 * a[3] * a[5]) + n * modulus[5];
        c9  += (2 * a[3] * a[6]) + n * modulus[6];
        c10 += (2 * a[3] * a[7]) + n * modulus[7];
        c11 += (2 * a[3] * a[8]) + n * modulus[8];
        c12 += (2 * a[3] * a[9]) + n * modulus[9];
        debugRow("row 4\n", c3, c4, c5, c6, c7, c8, c9, c10, c11, c12);

        c4  +=  (c3 >> BITS_PER_LIMB);
        n = c4&LIMB_MASK;    c4 += n * modulus[0];
        c5  +=                     n * modulus[1];
        c6  +=                     n * modulus[2];
        c7  +=                     n * modulus[3];
        c8  += (    a[4] * a[4]) + n * modulus[4];
        c9  += (2 * a[4] * a[5]) + n * modulus[5];
        c10 += (2 * a[4] * a[6]) + n * modulus[6];
        c11 += (2 * a[4] * a[7]) + n * modulus[7];
        c12 += (2 * a[4] * a[8]) + n * modulus[8];
        c13 += (2 * a[4] * a[9]) + n * modulus[9];
        debugRow("row 5\n", c4, c5, c6, c7, c8, c9, c10, c11, c12, c13);

        c5  += (c4 >> BITS_PER_LIMB);
        n = c5&LIMB_MASK;    c5 += n * modulus[0];
        c6  +=                     n * modulus[1];
        c7  +=                     n * modulus[2];
        c8  +=                     n * modulus[3];
        c9  +=                     n * modulus[4];
        c10 += (    a[5] * a[5]) + n * modulus[5];
        c11 += (2 * a[5] * a[6]) + n * modulus[6];
        c12 += (2 * a[5] * a[7]) + n * modulus[7];
        c13 += (2 * a[5] * a[8]) + n * modulus[8];
        c14 += (2 * a[5] * a[9]) + n * modulus[9];
        debugRow("row 6\n", c5, c6, c7, c8, c9, c10, c11, c12, c13, c14);

        c6  += (c5 >> BITS_PER_LIMB);
        n = c6&LIMB_MASK;    c6 += n * modulus[0];
        c7  +=                     n * modulus[1];
        c8  +=                     n * modulus[2];
        c9  +=                     n * modulus[3];
        c10 +=                     n * modulus[4];
        c11 +=                     n * modulus[5];
        c12 += (    a[6] * a[6]) + n * modulus[6];
        c13 += (2 * a[6] * a[7]) + n * modulus[7];
        c14 += (2 * a[6] * a[8]) + n * modulus[8];
        c15 += (2 * a[6] * a[9]) + n * modulus[9];
        debugRow("row 7\n", c6, c7, c8, c9, c10, c11, c12, c13, c14, c15);

        c7  +=  (c6 >> BITS_PER_LIMB);
        n = c7&LIMB_MASK;    c7 += n * modulus[0];
        c8  +=                     n * modulus[1];
        c9  +=                     n * modulus[2];
        c10 +=                     n * modulus[3];
        c11 +=                     n * modulus[4];
        c12 +=                     n * modulus[5];
        c13 +=                     n * modulus[6];
        c14 += (    a[7] * a[7]) + n * modulus[7];
        c15 += (2 * a[7] * a[8]) + n * modulus[8];
        c16 += (2 * a[7] * a[9]) + n * modulus[9];
        debugRow("row 8\n", c7, c8, c9, c10, c11, c12, c13, c14, c15, c16);

        c8  += (c7 >> BITS_PER_LIMB);
        n = c8&LIMB_MASK;    c8 += n * modulus[0];
        c9  +=                     n * modulus[1];
        c10 +=                     n * modulus[2];
        c11 +=                     n * modulus[3];
        c12 +=                     n * modulus[4];
        c13 +=                     n * modulus[5];
        c14 +=                     n * modulus[6];
        c15 +=                     n * modulus[7];
        c16 += (    a[8] * a[8]) + n * modulus[8];
        c17 += (2 * a[8] * a[9]) + n * modulus[9];
        debugRow("row 9\n", c8, c9, c10, c11, c12, c13, c14, c15, c16, c17);

        c9  += (c8 >> BITS_PER_LIMB);
        n = c9&LIMB_MASK;c9 += n * modulus[0];
        c10 +=                 n * modulus[1];
        c11 +=                 n * modulus[2];
        c12 +=                 n * modulus[3];
        c13 +=                 n * modulus[4];
        c14 +=                 n * modulus[5];
        c15 +=                 n * modulus[6];
        c16 +=                 n * modulus[7];
        c17 +=                 n * modulus[8];
        c18 += (a[9] * a[9]) + n * modulus[9];
        debugRow("row 10\n", c9, c10, c11, c12, c13, c14, c15, c16, c17, c18);

        c10 += c9  >> BITS_PER_LIMB;
        c11 += c10 >> BITS_PER_LIMB; c10 &= LIMB_MASK;
        c12 += c11 >> BITS_PER_LIMB; c11 &= LIMB_MASK;
        c13 += c12 >> BITS_PER_LIMB; c12 &= LIMB_MASK;
        c14 += c13 >> BITS_PER_LIMB; c13 &= LIMB_MASK;
        c15 += c14 >> BITS_PER_LIMB; c14 &= LIMB_MASK;
        c16 += c15 >> BITS_PER_LIMB; c15 &= LIMB_MASK;
        c17 += c16 >> BITS_PER_LIMB; c16 &= LIMB_MASK;
        c18 += c17 >> BITS_PER_LIMB; c17 &= LIMB_MASK;
        c19 += c18 >> BITS_PER_LIMB; c18 &= LIMB_MASK;
                                     //c19 &= LIMB_MASK;
        debugRow("final sum\n", c10, c11, c12, c13, c14, c15, c16, c17, c18, c19);

        c0 = c10 - modulus[0];
        c1 = c11 - modulus[1] - (c0 >> BITS_PER_LIMB); c0 &= LIMB_MASK;
        c2 = c12 - modulus[2] - (c1 >> BITS_PER_LIMB); c1 &= LIMB_MASK;
        c3 = c13 - modulus[3] - (c2 >> BITS_PER_LIMB); c2 &= LIMB_MASK;
        c4 = c14 - modulus[4] - (c3 >> BITS_PER_LIMB); c3 &= LIMB_MASK;
        c5 = c15 - modulus[5] - (c4 >> BITS_PER_LIMB); c4 &= LIMB_MASK;
        c6 = c16 - modulus[6] - (c5 >> BITS_PER_LIMB); c5 &= LIMB_MASK;
        c7 = c17 - modulus[7] - (c6 >> BITS_PER_LIMB); c6 &= LIMB_MASK;
        c8 = c18 - modulus[8] - (c7 >> BITS_PER_LIMB); c7 &= LIMB_MASK;
        c9 = c19 - modulus[9] - (c8 >> BITS_PER_LIMB); c8 &= LIMB_MASK;
        long mask = c9 >> BITS_PER_LIMB; // Signed shift!
                                                       //c9 &= LIMB_MASK;

        debugRow("reduced\n", c0, c1, c2, c3, c4, c5, c6, c7, c8, c9);
        assert(mask==0 || mask==-1);

        r[0] = (c10 & mask) | (c0 & ~mask);
        r[1] = (c11 & mask) | (c1 & ~mask);
        r[2] = (c12 & mask) | (c2 & ~mask);
        r[3] = (c13 & mask) | (c3 & ~mask);
        r[4] = (c14 & mask) | (c4 & ~mask);
        r[5] = (c15 & mask) | (c5 & ~mask);
        r[6] = (c16 & mask) | (c6 & ~mask);
        r[7] = (c17 & mask) | (c7 & ~mask);
        r[8] = (c18 & mask) | (c8 & ~mask);
        r[9] = (c19 & mask) | (c9 & ~mask);

        debugRow("r =\n", r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9]);




        // long c0  = (a[0] * a[0]);
        // long c1  = 2 * ((a[0] * a[1]))                                                                 + (c0 * modulus[1]);
        // long c2  = 2 * ((a[0] * a[2])) + (a[1] * a[1])                                                 + (c0 * modulus[2]) + (c1 * modulus[1]);
        // long c3  = 2 * ((a[0] * a[3]) + (a[1] * a[2]))                                                 + (c0 * modulus[3]) + (c1 * modulus[2]) + (c2 * modulus[1]);
        // long c4  = 2 * ((a[0] * a[4]) + (a[1] * a[3])) + (a[2] * a[2])                                 + (c0 * modulus[4]) + (c1 * modulus[3]) + (c2 * modulus[2]) + (c3 * modulus[1]);
        // long c5  = 2 * ((a[0] * a[5]) + (a[1] * a[4]) + (a[2] * a[3]))                                 + (c0 * modulus[5]) + (c1 * modulus[4]) + (c2 * modulus[3]) + (c3 * modulus[2]) + (c4 * modulus[1]);
        // long c6  = 2 * ((a[0] * a[6]) + (a[1] * a[5]) + (a[2] * a[4])) + (a[3] * a[3])                 + (c0 * modulus[6]) + (c1 * modulus[5]) + (c2 * modulus[4]) + (c3 * modulus[3]) + (c4 * modulus[2]) + (c5 * modulus[1]);
        // long c7  = 2 * ((a[0] * a[7]) + (a[1] * a[6]) + (a[2] * a[5]) + (a[3] * a[4]))                 + (c0 * modulus[7]) + (c1 * modulus[6]) + (c2 * modulus[5]) + (c3 * modulus[4]) + (c4 * modulus[3]) + (c5 * modulus[2]) + (c6 * modulus[1]);
        // long c8  = 2 * ((a[0] * a[8]) + (a[1] * a[7]) + (a[2] * a[6]) + (a[3] * a[5])) + (a[4] * a[4]) + (c0 * modulus[8]) + (c1 * modulus[7]) + (c2 * modulus[6]) + (c3 * modulus[5]) + (c4 * modulus[4]) + (c5 * modulus[3]) + (c6 * modulus[2]) + (c7 * modulus[1]);
        // long c9  = 2 * ((a[0] * a[9]) + (a[1] * a[8]) + (a[2] * a[7]) + (a[3] * a[6]) + (a[4] * a[5])) + (c0 * modulus[9]) + (c1 * modulus[8]) + (c2 * modulus[7]) + (c3 * modulus[6]) + (c4 * modulus[5]) + (c5 * modulus[4]) + (c6 * modulus[3]) + (c7 * modulus[2]) + (c8 * modulus[1]);
        // long c10 = 2 * ((a[1] * a[9]) + (a[2] * a[8]) + (a[3] * a[7]) + (a[4] * a[6])) + (a[5] * a[5])                     + (c1 * modulus[9]) + (c2 * modulus[8]) + (c3 * modulus[7]) + (c4 * modulus[6]) + (c5 * modulus[5]) + (c6 * modulus[4]) + (c7 * modulus[3]) + (c8 * modulus[2]) + (c9 * modulus[1]);
        // long c11 = 2 * ((a[2] * a[9]) + (a[3] * a[8]) + (a[4] * a[7]) + (a[5] * a[6]))                                                         + (c2 * modulus[9]) + (c3 * modulus[8]) + (c4 * modulus[7]) + (c5 * modulus[6]) + (c6 * modulus[5]) + (c7 * modulus[4]) + (c8 * modulus[3]) + (c9 * modulus[2]);
        // long c12 = 2 * ((a[3] * a[9]) + (a[4] * a[8]) + (a[5] * a[7])) + (a[6] * a[6])                                                                             + (c3 * modulus[9]) + (c4 * modulus[8]) + (c5 * modulus[7]) + (c6 * modulus[6]) + (c7 * modulus[5]) + (c8 * modulus[4]) + (c9 * modulus[3]);
        // long c13 = 2 * ((a[4] * a[9]) + (a[5] * a[8]) + (a[6] * a[7]))                                                                                                                 + (c4 * modulus[9]) + (c5 * modulus[8]) + (c6 * modulus[7]) + (c7 * modulus[6]) + (c8 * modulus[5]) + (c9 * modulus[4]);
        // long c14 = 2 * ((a[5] * a[9]) + (a[6] * a[8])) + (a[7] * a[7])                                                                                                                                     + (c5 * modulus[9]) + (c6 * modulus[8]) + (c7 * modulus[7]) + (c8 * modulus[6]) + (c9 * modulus[5]);
        // long c15 = 2 * ((a[6] * a[9]) + (a[7] * a[8]))                                                                                                                                                                         + (c6 * modulus[9]) + (c7 * modulus[8]) + (c8 * modulus[7]) + (c9 * modulus[6]);
        // long c16 = 2 * ((a[7] * a[9])) + (a[8] * a[8])                                                                                                                                                                                             + (c7 * modulus[9]) + (c8 * modulus[8]) + (c9 * modulus[7]);
        // long c17 = 2 * ((a[8] * a[9]))                                                                                                                                                                                                                                 + (c8 * modulus[9]) + (c9 * modulus[8]);
        // long c18 = (a[9] * a[9])                                                                                                                                                                                                                                                           + (c9 * modulus[9]);

        //carryReduce(r, c10, c11, c12, c13, c14, c15, c16, c17, c18, 0);
    }
    // One in montgomery domain: (1*2^256) mod p
    // 0x0fffffffeffffffffffffffffffffffff000000000000000000000001
    // 0xfffffffeffffffffffffffffffffffff0000000000000000000000010
    //private static final long[] one = new long[]{ 0x0000001, 0x0000000, 0x0000000, 0x3fc0000, 0x3ffffff, 0x3ffffff, 0x3ffffff, 0x3fffbff, 0x000ffff, 0x0000000};
    private static final long[] one     = new long[]{ 0x0000010, 0x0000000, 0x0000000, 0x3c00000, 0x3ffffff, 0x3ffffff, 0x3ffffff, 0x3ffbfff, 0x00fffff, 0x0000000};
    private static final long[] modulus = new long[]{ 0x3ffffff, 0x3ffffff, 0x3ffffff, 0x003ffff, 0x0000000, 0x0000000, 0x0000000, 0x0000400, 0x3ff0000, 0x03fffff};
    private static final long[] modulus2 = new long[]{ 0xfffffffffffffL, 0x00fffffffffffL,  0x0000000000000L,  0x0001000000000L,  0x0ffffffff0000L};
    
    @Override
    public ImmutableElement get1() {
        return new ImmutableElement(one, 0);
    }

    // public ImmutableElement get1R() {
    //     return super.get1();
    // }

    // ; 2^(2*260)%p
    // 0x4fffffffdfffffffffffffffefffffffbffffffff000000000000000300
    private static final long[] h = new long[]{ 0x0000300, 0x0000000, 0x3f00000, 0x3ffffff, 0x3fffffb, 0x3ffffbf, 0x3ffffff, 0x3f7ffff, 0x0ffffff, 0x0000001 };
    @Override
    public ImmutableIntegerModuloP fromMontgomery(ImmutableIntegerModuloP n) {
        assert n.getField() == MontgomeryIntegerPolynomialP256.ONE;
        
        ImmutableElement nn = (ImmutableElement)n;
        // return (IntegerPolynomialP256.ImmutableElement)nn.multiply(new ImmutableElement(h, 0));
        // IntegerPolynomialP256 f = n.getField();
        long[] r = new long[NUM_LIMBS];
        long[] one = new long[NUM_LIMBS];
        one[0] = 1L;
        MontgomeryIntegerPolynomialP256.ONE.mult(nn.getLimbs(), one, r);
        return IntegerPolynomialP256.ONE.new ImmutableElement(r, 0);
    }

    @Override
    public ImmutableIntegerModuloP toMontgomery(ImmutableIntegerModuloP n) {
        assert n.getField() == IntegerPolynomialP256.ONE;

        ImmutableElement nn = (ImmutableElement)n;
        // return (MontgomeryIntegerPolynomialP256.ImmutableElement)nn.multiply(super.get1());
        ///
        // return new ImmutableElement(r, 0);
        long[] r = new long[NUM_LIMBS];
        System.out.println("a = " + nn.asBigInteger().toString(16));
        MontgomeryIntegerPolynomialP256.ONE.mult(nn.getLimbs(), h, r);
        return MontgomeryIntegerPolynomialP256.ONE.new ImmutableElement(r, 0);
    }

    // @Override
    // protected void finalCarryReduceLast(long[] limbs) {
    //     // TODO Auto-generated method stub
        
    // }

    // @Override
    // protected void reduce(long[] a) {
    //     // TODO Auto-generated method stub
        
    // }

    // @Override
    // protected void reduceIn(long[] c, long v, int i) {
    //     // TODO Auto-generated method stub
        
    // }

    /*
    @Override
    protected void addLimbs(long[] a, long[] b, long[] dst) {
        // TODO Auto-generated method stub
        super.addLimbs(a, b, dst);
    }

    @Override
    protected void addLimbsModPowerTwo(long[] limbs, long[] other, byte[] result) {
        // TODO Auto-generated method stub
        super.addLimbsModPowerTwo(limbs, other, result);
    }

    @Override
    protected void carry(long[] limbs, int start, int end) {
        // TODO Auto-generated method stub
        super.carry(limbs, start, end);
    }

    @Override
    protected void carry(long[] limbs) {
        // TODO Auto-generated method stub
        super.carry(limbs);
    }

    @Override
    protected long carryOut(long[] limbs, int index) {
        // TODO Auto-generated method stub
        return super.carryOut(limbs, index);
    }

    @Override
    protected long carryValue(long x) {
        // TODO Auto-generated method stub
        return super.carryValue(x);
    }

    @Override
    protected void decode(long[] v, byte[] dst, int offset, int length) {
        // TODO Auto-generated method stub
        super.decode(v, dst, offset, length);
    }

    @Override
    protected void encode(ByteBuffer buf, int length, byte highByte, long[] result) {
        // TODO Auto-generated method stub
        super.encode(buf, length, highByte, result);
    }

    @Override
    protected void encode(byte[] v, int offset, int length, byte highByte, long[] result) {
        // TODO Auto-generated method stub
        super.encode(v, offset, length, highByte, result);
    }

    @Override
    protected void encodeSmall(ByteBuffer buf, int length, byte highByte, long[] result) {
        // TODO Auto-generated method stub
        super.encodeSmall(buf, length, highByte, result);
    }

    @Override
    protected BigInteger evaluate(long[] limbs) {
        // TODO Auto-generated method stub
        return super.evaluate(limbs);
    }

    @Override
    protected void finalCarryReduceLast(long[] limbs) {
        // TODO Auto-generated method stub
        
    }

    @Override
    protected void finalReduce(long[] limbs) {
        // TODO Auto-generated method stub
        super.finalReduce(limbs);
    }

    @Override
    public ImmutableElement get0() {
        // TODO Auto-generated method stub
        return super.get0();
    }

    @Override
    public ImmutableElement getElement(BigInteger v) {
        // TODO Auto-generated method stub
        return super.getElement(v);
    }

    @Override
    public ImmutableElement getElement(byte[] v, int offset, int length, byte highByte) {
        // TODO Auto-generated method stub
        return super.getElement(v, offset, length, highByte);
    }

    @Override
    public int getMaxAdds() {
        // TODO Auto-generated method stub
        return super.getMaxAdds();
    }

    @Override
    protected int getNumLimbs() {
        // TODO Auto-generated method stub
        return super.getNumLimbs();
    }

    @Override
    public BigInteger getSize() {
        // TODO Auto-generated method stub
        return super.getSize();
    }

    @Override
    public SmallValue getSmallValue(int value) {
        // TODO Auto-generated method stub
        return super.getSmallValue(value);
    }

    @Override
    protected void limbsToByteArray(long[] limbs, byte[] result) {
        // TODO Auto-generated method stub
        super.limbsToByteArray(limbs, result);
    }

    @Override
    protected void multByInt(long[] a, long b) {
        // TODO Auto-generated method stub
        super.multByInt(a, b);
    }

    @Override
    protected void postEncodeCarry(long[] v) {
        // TODO Auto-generated method stub
        super.postEncodeCarry(v);
    }

    @Override
    protected void reduce(long[] a) {
        // TODO Auto-generated method stub
        
    }

    @Override
    protected void reduceIn(long[] c, long v, int i) {
        // TODO Auto-generated method stub
        
    }

    @Override
    protected void setLimbsValuePositive(BigInteger v, long[] limbs) {
        // TODO Auto-generated method stub
        super.setLimbsValuePositive(v, limbs);
    }

    @Override
    public ImmutableIntegerModuloP getElement(byte[] v) {
        // TODO Auto-generated method stub
        return super.getElement(v);
    }*/



    // protected void mult(long[] a, long[] b, long[] r) {

    //     // Use grade-school multiplication into primitives to avoid the
    //     // temporary array allocation. This is equivalent to the following
    //     // code:
    //     //  long[] c = new long[2 * NUM_LIMBS - 1];
    //     //  for(int i = 0; i < NUM_LIMBS; i++) {
    //     //      for(int j - 0; j < NUM_LIMBS; j++) {
    //     //          c[i + j] += a[i] * b[j]
    //     //      }
    //     //  }

    //     long c0 = (a[0] * b[0]);
    //     long c1 = (a[0] * b[1]) + (a[1] * b[0]);
    //     long c2 = (a[0] * b[2]) + (a[1] * b[1]) + (a[2] * b[0]);
    //     long c3 = (a[0] * b[3]) + (a[1] * b[2]) + (a[2] * b[1]) + (a[3] * b[0]);
    //     long c4 = (a[0] * b[4]) + (a[1] * b[3]) + (a[2] * b[2]) + (a[3] * b[1]) + (a[4] * b[0]);
    //     long c5 = (a[1] * b[4]) + (a[2] * b[3]) + (a[3] * b[2]) + (a[4] * b[1]);
    //     long c6 = (a[2] * b[4]) + (a[3] * b[3]) + (a[4] * b[2]);
    //     long c7 = (a[3] * b[4]) + (a[4] * b[3]);
    //     long c8 = (a[4] * b[4]);

    //     carryReduce(r, c0, c1, c2, c3, c4, c5, c6, c7, c8);
    // }

    // private void carryReduce(long[] r, long c0, long c1, long c2, long c3,
    //                          long c4, long c5, long c6, long c7, long c8) {
    //     //reduce(2, 2)
    //     r[2] = c2 + (c7 * SUBTRAHEND);
    //     c3 += (c8 * SUBTRAHEND);

    //     // carry(3, 2)
    //     long carry3 = carryValue(c3);
    //     r[3] = c3 - (carry3 << BITS_PER_LIMB);
    //     c4 += carry3;

    //     long carry4 = carryValue(c4);
    //     r[4] = c4 - (carry4 << BITS_PER_LIMB);
    //     c5 += carry4;

    //     // reduce(0, 2)
    //     r[0] = c0 + (c5 * SUBTRAHEND);
    //     r[1] = c1 + (c6 * SUBTRAHEND);

    //     // carry(0, 4)
    //     carry(r);
    // }

    // @Override
    // protected void square(long[] a, long[] r) {
    //     // Use grade-school multiplication with a simple squaring optimization.
    //     // Multiply into primitives to avoid the temporary array allocation.
    //     // This is equivalent to the following code:
    //     //  long[] c = new long[2 * NUM_LIMBS - 1];
    //     //  for(int i = 0; i < NUM_LIMBS; i++) {
    //     //      c[2 * i] = a[i] * a[i];
    //     //      for(int j = i + 1; j < NUM_LIMBS; j++) {
    //     //          c[i + j] += 2 * a[i] * a[j]
    //     //      }
    //     //  }

    //     long c0 = (a[0] * a[0]);
    //     long c1 = 2 * (a[0] * a[1]);
    //     long c2 = 2 * (a[0] * a[2]) + (a[1] * a[1]);
    //     long c3 = 2 * (a[0] * a[3] + a[1] * a[2]);
    //     long c4 = 2 * (a[0] * a[4] + a[1] * a[3]) + (a[2] * a[2]);
    //     long c5 = 2 * (a[1] * a[4] + a[2] * a[3]);
    //     long c6 = 2 * (a[2] * a[4]) + (a[3] * a[3]);
    //     long c7 = 2 * (a[3] * a[4]);
    //     long c8 = (a[4] * a[4]);

    //     carryReduce(r, c0, c1, c2, c3, c4, c5, c6, c7, c8);
    // }

    // @Override
    // protected void encode(ByteBuffer buf, int length, byte highByte,
    //                       long[] result) {
    //     ByteOrder currOrder = buf.order();
    //     buf.order(ByteOrder.LITTLE_ENDIAN);
    //     if (length == 16) {
    //         long low = buf.getLong();
    //         long high = buf.getLong();
    //         encode(high, low, highByte, result);
    //     } else {
    //         super.encode(buf, length, highByte, result);
    //     }
    //     buf.order(currOrder);
    // }

    // protected void encode(long high, long low, byte highByte, long[] result) {
    //     result[0] = low & 0x3FFFFFFL;
    //     result[1] = (low >>> 26) & 0x3FFFFFFL;
    //     result[2] = (low >>> 52) + ((high & 0x3FFFL) << 12);
    //     result[3] = (high >>> 14) & 0x3FFFFFFL;
    //     result[4] = (high >>> 40) + (highByte << 24L);
    // }

    // private static final VarHandle AS_LONG_LE = MethodHandles
    //     .byteArrayViewVarHandle(long[].class, ByteOrder.LITTLE_ENDIAN);

    // protected void encode(byte[] v, int offset, int length, byte highByte,
    //                       long[] result) {
    //     if (length == 16) {
    //         long low = (long) AS_LONG_LE.get(v, offset);
    //         long high = (long) AS_LONG_LE.get(v, offset + 8);
    //         encode(high, low, highByte, result);
    //     } else {
    //         super.encode(v, offset, length, highByte, result);
    //     }
    // }

    @Override
    protected void reduceIn(long[] limbs, long x, int index) {
        // this only works when BITS_PER_LIMB * NUM_LIMBS = POWER exactly
        // long reducedValue = (x * SUBTRAHEND);
        // limbs[index - NUM_LIMBS] += reducedValue;
    }

    @Override
    protected void finalCarryReduceLast(long[] limbs) {
        long carry = limbs[numLimbs - 1] >> bitsPerLimb;
        limbs[numLimbs - 1] -= carry << bitsPerLimb;
        reduceIn(limbs, carry, numLimbs);
    }

    @Override
    protected long carryValue(long x) {
        // This representation has plenty of extra space, so we can afford to
        // do a simplified carry operation that is more time-efficient.

        return x >> BITS_PER_LIMB;
    }

    @Override
    protected void postEncodeCarry(long[] v) {
        // not needed because carry is unsigned
    }

    @Override
    protected void reduce(long[] limbs) {
        long carry3 = carryOut(limbs, 3);
        long new4 = carry3 + limbs[4];

        long carry4 = carryValue(new4);
        limbs[4] = new4 - (carry4 << BITS_PER_LIMB);

        reduceIn(limbs, carry4, 5);
        carry(limbs);
    }
}

M1 = load(*m)
M2 = M1 shift one q element <<
A1 = load(*a)
A2 = A1 shift one q element <<
Acc1 = 0
---- for i = 0 to 5
    Acc2 = 0
    B1[0] = load(b[i])
    B1 = B1[0] replicate q
    Acc1 += A1 *  B1
    Acc2 += A2 *h B1
    N = Acc1[0] replicate q
    Acc1 += M1  * N
    Acc2 += M1 *h N
    Acc1 = Acc1 shift one q element >>
    Acc1 = Acc1 + Acc2
---- done
